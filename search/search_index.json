{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#clojure-lsp","title":"clojure-lsp","text":"<p>A Language Server for Clojure(script). Taking a Cursive-like approach of statically analyzing code.</p> <p> homepage \u2022   features \u2022   installation \u2022   settings \u2022   clients \u2022   troubleshooting \u2022   support us </p>"},{"location":"#overview","title":"Overview","text":"<p>The goal of this project is to bring great editing tools for Clojure/Clojurescript to all editors and programatically via its CLI and API. It aims to work alongside you to help you navigate, identify and fix errors, perform refactors and much more!</p> <p>You will get:</p> <ul> <li>Autocomplete</li> <li>Jump to definition/implementation</li> <li>Find references</li> <li>Renaming</li> <li>Code actions</li> <li>Errors</li> <li>Automatic ns cleaning</li> <li>Lots of Refactorings</li> <li>Code lens</li> <li>Semantic tokens (syntax highlighting)</li> <li>Call hierarchy</li> <li>Java interop</li> </ul> <p>For all available documentation, check the official website.</p> <p>Also, clojure-lsp doesn't need to run only with an editor, for more information check the Outside editor (API) section.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>Contributions to <code>clojure-lsp</code> are very welcome! You can open an issue or a PR and we will love to help.</p>"},{"location":"#support-the-project","title":"Support the project","text":"<p><code>clojure-lsp</code> has more than 30.000 lines of code, to keep all of this working, we need to help the community with a lot of issues and implement new features. As a LSP server, this project is the base for Clojure clients like Emacs(lsp-mode), VSCode(Calva), vim and other editors.</p> <p>You can help us keep going and improving it by supporting the project, the support helps to keep the project going and being updated and maintained.</p> <p> Thank you to Clojurists Together which sponsored this project during Q3 2021 and Q1 2022 </p>"},{"location":"#gold-sponsors","title":"Gold sponsors","text":"<p>No Gold sponsors at the moment.</p>"},{"location":"#sponsors","title":"Sponsors","text":"<p>Special thanks to Eccentric-J for the <code>clojure-lsp</code> logo</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":"<ul> <li>Docs</li> <li> <p>update neovim editor configuration for clojure lsp</p> </li> <li> <p>General</p> </li> <li>New feature: Add <code>clojure-lsp/cyclic-dependencies</code> linter to detect cyclic dependencies between namespaces in the project.</li> <li>New optional <code>:kondo-config-dir</code> setting to configure clj-kondo execution.</li> <li>Parallelize and log the time spent on built-in linters execution.</li> </ul>"},{"location":"CHANGELOG/#20250613-204544","title":"2025.06.13-20.45.44","text":"<ul> <li>General</li> <li>Fix custom-linters not working for cases using <code>clojure-lsp.custom-linters-api/find-nodes</code>.</li> <li>Improve <code>clojure-lsp.custom-linters-api/dir-uris-&gt;file-uris</code> to consider file-uris as well on input.</li> </ul>"},{"location":"CHANGELOG/#20250606-190449","title":"2025.06.06-19.04.49","text":"<ul> <li>General</li> <li>Fix .lsp/config.edn file not found diagnostic when it doesn't exist on project.</li> <li>Fix custom linters source-paths analysis to consider all files in a source-path.</li> <li>Fix crash on files with empty ignore comments.</li> <li>Bump clj-kondo to <code>2025.06.05</code>.</li> <li>Fix analysis consistency for internal files.</li> </ul>"},{"location":"CHANGELOG/#20250527-135657","title":"2025.05.27-13.56.57","text":"<ul> <li>General</li> <li>Consider <code>.lsp/config.edn</code> as part of project code, removing false positives of unused-public-var linter.</li> <li>Consider full qualified symbols in edn files when checking for var references.</li> <li>Improve clojure-lsp linter capabilities, migrating <code>unused-public-var</code> and <code>different-aliases</code> linters to be built-in linters. #2050<ul> <li>Migrate from clj-kondo <code>custom-lint-fn</code> but considering kondo settings to avoid breaking changes.</li> <li>Considerably improve performance of <code>unused-public-var</code> and <code>different-aliases</code> linters.</li> </ul> </li> <li>Bump rewrite-clj to 1.2.50.</li> <li>New feature: Add support for custom project linters. #2043 #2058</li> <li>Publish to clojars <code>com.github.clojure-lsp/clojure-lsp-test-helper</code> to be able to test created custom linters.</li> <li>Bump clj-kondo to <code>2025.04.08-20250526.195207-12</code>.</li> <li>Small performance improvements across clojure-lsp, especially on places with comparassions inside big loops.</li> <li>Bump clj-depend to <code>0.11.1</code>.</li> <li> <p>Provide analysis of unresolved namespaces, making features like definition, hover, references work.</p> </li> <li> <p>Editor</p> </li> <li>Add support for LSP feature <code>textDocument/selectionRange</code>. #1961</li> <li> <p>Fix outdated analysis for watched created/deleted files (git branch switchs for example). #2046</p> </li> <li> <p>API/CLI</p> </li> <li>Replace <code>tools.cli</code> with <code>babashka.cli</code>. #2036</li> <li>Include <code>:clj-kondo-settings</code> to dump data.</li> </ul>"},{"location":"CHANGELOG/#20250423-181646","title":"2025.04.23-18.16.46","text":"<ul> <li>General</li> <li>Fix <code>unused-public-var</code> false positives when <code>:ignore-test-references? true</code>.</li> <li> <p>Bump clj-kondo to <code>2025.04.07</code>.</p> </li> <li> <p>Editor</p> </li> <li>Improve timbre context log.</li> <li>Fix suggestion for add require code action. #2017</li> <li>Improve find definition so it works on <code>declare</code> forms too. #1986</li> </ul>"},{"location":"CHANGELOG/#20250327-202136","title":"2025.03.27-20.21.36","text":"<ul> <li>General</li> <li>Bump rewrite-clj to <code>0bb572a03c0025c01f9c36bfca2815254683fbde</code>. #1984</li> <li>Bump clj-kondo to <code>2025.02.21-20250314.135629-7</code>.</li> <li>Add support for ignoring tests references for the <code>clojure-lsp/unused-public-var</code> linter. #1878</li> <li>Add <code>:test-locations-regex</code> configuration to allow customizing test file detection for the <code>unused-public-var</code> linter's <code>:ignore-test-references?</code> and test code lenses. #1878</li> <li> <p>Improve and standardize all logs for better troubleshooting and metrics collection.</p> </li> <li> <p>Editor</p> </li> <li>Add <code>forward</code>, <code>forward-select</code>, <code>backward</code> and <code>backward-select</code> paredit actions.</li> <li>Show add require code action for invalid syntax codes like <code>my-alias/</code>. #1957</li> <li>Improve startup performance for huge projects avoiding publish empty diagnostics for every file of the project unnecessarily.</li> </ul>"},{"location":"CHANGELOG/#20250307-174236","title":"2025.03.07-17.42.36","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2025.02.20</code>.</li> <li> <p>Add support for OpenTelemetry(otlp) log, enabled if configured. #1963</p> </li> <li> <p>Editor</p> </li> <li>Improve paredit slurp and barf corner cases. #1973 #1976</li> <li>Add Semantic Tokens support for the Clojure Reader Dispatch macro <code>#_</code> (ignore next form). #1965</li> <li>Fix regression on previous version on snippets completion. #1978</li> </ul>"},{"location":"CHANGELOG/#20250207-161124","title":"2025.02.07-16.11.24","text":"<ul> <li>Editor</li> <li>Add <code>:hover :hide-signature-call?</code> settings option to disable showing the surrounding call. #1954, @NoahTheDuke</li> <li>Revert #1933, which caused a regression on completion adding extra text.</li> <li>Fix fetching libs exception causing progress notification to be stuck. #1958</li> <li>Bump clj-kondo to <code>2025.01.17-20250207.105015-9</code>.</li> </ul>"},{"location":"CHANGELOG/#20250122-232823","title":"2025.01.22-23.28.23","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2025.01.16</code></li> <li>Bump lsp4clj to <code>1.11.0</code>.</li> <li>Add semantic version sorting in completion lib versions. #1913</li> <li>Fix internal error in range formatting. #1931</li> <li> <p>Drop support for jdk 8. #1942</p> </li> <li> <p>Editor</p> </li> <li>Change simple keyword completion to return all known keywords. #1920</li> <li>Return textEdit to CompletionItems to fix completion in Zed #1933</li> <li> <p>Restrict linked edits to namespace aliases only, and fix a few related issues #1947</p> </li> <li> <p>API/CLI</p> </li> <li>Add <code>:project-and-shallow-analysis</code> type to <code>dump</code> command</li> <li>Add <code>:diagnostics</code> to <code>dump</code> command output (successor of <code>:findings</code>)</li> </ul>"},{"location":"CHANGELOG/#20241108-174929","title":"2024.11.08-17.49.29","text":"<ul> <li>General</li> <li>Fix client capability check that prevents test file creation.</li> <li>Fix move-form double edit problem in cljc files.</li> <li>Fix disabling <code>:clojure-lsp/unused-public-var</code> linter also disabling <code>:clojure-lsp/different-aliases</code></li> <li>Bump clj-kondo to <code>2024.09.28-20240930.094425-2</code></li> <li>Bump lsp4clj to <code>1.10.0</code>.</li> <li>Bump clojure to <code>1.12.0</code>.</li> <li>Bump tools.cli to <code>1.0.230</code>.</li> <li>Bump timbre to <code>6.6.0</code>.</li> <li>Bump rewrite-clj to <code>1.1.48</code>.</li> <li>Bump cljfmt to <code>1.13.0</code>.</li> <li>Bump babashka/fs to <code>0.5.22</code>.</li> <li>New feature: completion of lib versions on deps.edn, bb.edn and project.clj files. #1905</li> <li>New feature: completion of clojure lib names from clojars and mvn-central for deps.edn, bb.edn and project.clj files. #1909</li> </ul>"},{"location":"CHANGELOG/#20240805-181600","title":"2024.08.05-18.16.00","text":"<ul> <li>General</li> <li>Fix CI for macos amd64. #1859</li> <li>Replace CirrusCI with Github for macos-aarch64 binary standardizing deploy process.</li> </ul>"},{"location":"CHANGELOG/#20240803-152827","title":"2024.08.03-15.28.27","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2024.08.01</code> fixing high memory usage issue.</li> <li>Bump Clojure to <code>1.11.3</code></li> <li>Fix use of <code>:filename-pattern</code> from kondo breaking references.</li> <li> <p>Add <code>api.dump</code> to the pod namespace so it can be used with babashka.</p> </li> <li> <p>Editor</p> </li> <li>Add <code>clojure.test/deftest</code> option to resolve macro as code action. #1850</li> <li>Allow starting clojure-lsp without a project root but with limited features. #1815</li> <li>Add code action \"Add require\" for namespaced keywords. #1793</li> </ul>"},{"location":"CHANGELOG/#20240422-115026","title":"2024.04.22-11.50.26","text":"<ul> <li>General</li> <li>Bump clj-depend to <code>0.11.0</code>.</li> <li> <p>Fix renaming ns when one source path is a prefix of another (e.g. <code>src/clj</code> and <code>src/cljs</code>) #1805</p> </li> <li> <p>Editor</p> </li> <li>Use scope location instead of name location for folding feature.</li> <li>Fix paredit commands to consider previous element when cursor inside a closing bracket.</li> <li>Fix paredit commands to move cursor after applying command.</li> <li>Fix corner case on paredit commands duplicating forms.</li> <li>References of a var-definition now consider full quoted qualified symbols. #1804</li> </ul>"},{"location":"CHANGELOG/#20240331-191013","title":"2024.03.31-19.10.13","text":"<ul> <li>Editor</li> <li>Adding require command fails for requires without alias. #1791</li> <li>Add require command without alias now add requires with brackets.</li> <li>Project tree feature now support keyword definitions like re-frame sub/reg. #1789</li> <li>Support <code>textDocument/foldingRange</code> LSP feature. #1602</li> <li>Improve <code>textDocument/documentSymbol</code> considering keyword definitions and returning flatten elements.</li> <li>Fix Add require/import usages count in code actions. #1794.</li> </ul>"},{"location":"CHANGELOG/#20240313-131100","title":"2024.03.13-13.11.00","text":"<ul> <li>General</li> <li> <p>Bump clj-kondo to <code>2024.03.13</code> fixing high memory usage issue.</p> </li> <li> <p>Editor</p> </li> <li>Fix <code>workspace/didChangeConfiguration</code> exception causing noise on logs. #1784</li> </ul>"},{"location":"CHANGELOG/#20240301-113751","title":"2024.03.01-11.37.51","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2024.02.13-20240228.191822-15</code>.</li> <li>Add <code>:clojure-lsp/different-aliases</code> linter. #1770</li> <li>Fix unused-public-var false positives for definterface methods. #1762</li> <li> <p>Fix rename of records when usage is using an alias. #1756</p> </li> <li> <p>Editor</p> </li> <li>Fix documentation resolve not working for clients without hover markdown support.</li> <li>Added setting to allow requires and imports to be added within the current comment form during code action and completion: <code>:add-missing :add-to-rcf</code> #1316</li> <li>Fix <code>suppress-diagnostics</code> not working on top-level forms when preceded by comment. #1678</li> <li>Fix add missing import feature on some corner cases for java imports. #1754</li> <li>Fix semantic tokens and other analysis not being applied for project files at root. #1759</li> <li>Add support for adding missing requires and completion results referring to JS libraries which already have an alias in the project #1587</li> </ul>"},{"location":"CHANGELOG/#20240201-110159","title":"2024.02.01-11.01.59","text":"<ul> <li>General</li> <li>Fix binary not wokring on some aarch64 linux. #1748</li> <li>Add new <code>Project tree</code> feature via the <code>clojure/workspace/projectTree/nodes</code> custom method. #1752</li> <li> <p>Fix <code>--log-path</code> setting to work with <code>listen</code>/empty arg, starting clojure-lsp server and logging properly.</p> </li> <li> <p>Editor</p> </li> <li>Fix <code>didChangeConfiguration</code> throwing exception. #1749</li> <li>Fix <code>rename</code> of ns causing wrong ns names because of duplicate rename actions. #1751</li> <li>Fix <code>range-formatting</code> throwing exceptions when unbalanced parens are sent from client. #1758</li> <li>Fix rename functions need to clean up LSP state or restart in some clients implementing LSP method <code>didRenameFiles</code>. #1755</li> <li>Fix <code>thread last all</code> failed after comment form <code>#_(...)</code>. #1745</li> </ul>"},{"location":"CHANGELOG/#20231229-120927","title":"2023.12.29-12.09.27","text":"<ul> <li>General</li> <li>Fix deep-merge of client settings with project settings.</li> <li>Fix <code>max-line-length</code> on clean-ns feature not respecting some lines when contains a lot of refers. #1729</li> <li>Bump cljfmt to 0.12.0.</li> <li> <p>Bump clj-kondo to <code>2023.12.15</code>.</p> </li> <li> <p>Editor</p> </li> <li>Fix edn tree visualization for keys with same name in the same level. #1558</li> <li>Make clear when <code>hover</code> feature is in a calling and not in a specific symbol. #1281</li> <li> <p>Exclude keys that are already included in the function call from completion suggestions. #1720</p> </li> <li> <p>API/CLI</p> </li> <li>Drastically improves performance of <code>format</code> task matching <code>cljfmt</code>, avoiding analyzing the project. #1723</li> </ul>"},{"location":"CHANGELOG/#20231030-162541","title":"2023.10.30-16.25.41","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2023.10.21-20231022.204832-4</code>.</li> <li>Fix move-to-let/expand-let bug for multi-arity functions #1283</li> <li>Fix <code>:dependency-scheme</code> setting for .java files from jars #1653</li> <li>Bump graalvm to 21.</li> <li>Improve overall performance using GraalVM 21 PGO (Profile-Guided Optimizations).</li> <li>Extract the responsibility for merging clj-depend config #1265</li> <li>Support passing configurations to clj-depend via CLI #1694</li> <li>Bump clj-depend to <code>0.9.2</code></li> <li> <p>Performance: remove keyword-usages elements from external analysis as they are not used for any feature and for big projects may affect memory. #1700</p> </li> <li> <p>Editor</p> </li> <li>New paredit refactorings:<ul> <li><code>forward-slurp</code></li> <li><code>forward-barf</code></li> <li><code>backward-slurp</code></li> <li><code>backward-barf</code></li> <li><code>raise</code></li> <li><code>kill</code></li> </ul> </li> <li>Improve rename to avoid internal errors and show proper error messages. #1691</li> <li>Exclude unused-public-vars when inside a comment block.</li> <li>Add <code>:analysis-summary</code> field to <code>serverInfo</code> command to get information about project for performance analysis.</li> <li>Add <code>:analysis</code> settings, with options to disable specific analysis for better performance on huge projects. #1700</li> </ul>"},{"location":"CHANGELOG/#20230806-002806","title":"2023.08.06-00.28.06","text":"<ul> <li>General</li> <li>Fix truncation of namespaced keywords #1640</li> <li>Add rewrite-clj node to cursor-info.</li> <li>Fixing semantic-tokens, collons not managed by lsp anymore. #1550</li> <li>Fix <code>:paths-ignore-regex</code> setting to consider settings reload.</li> <li>Bump clj-kondo to <code>2023.07.14-20230717.090255-3</code>. #1624</li> <li>Fix inconsistencies with <code>:defined-by-&gt;lint-as</code>.</li> <li>Improve memory usage during cache save, avoiding \"Out of memory\" exceptions.</li> <li>Prevent file rename when a namespace is defined in multiple files #1574</li> <li>Fix user formatting setting being override by :style/indent metadata in macros.</li> <li>Bump cljfmt to <code>0.11.2</code>. #1634</li> <li>Bump lsp4clj to <code>1.8.1</code>.</li> <li> <p>Added functionality to <code>workspace/didChangeConfiguration</code> so it changes configuration on runtime.</p> </li> <li> <p>Editor</p> </li> <li> <p>Avoid returning all known keywords on empty keywords completion for performance reasons.</p> </li> <li> <p>API/CLI</p> </li> <li>Improve mem/cpu usage using less analysis for tasks.</li> </ul>"},{"location":"CHANGELOG/#20230701-223541","title":"2023.07.01-22.35.41","text":"<ul> <li>General</li> <li>Update flake.nix to build with babashka. #1373</li> <li>Bump clj-kondo to <code>2023.06.02-20230630.144012-16</code>.</li> <li>Improve support for ClojureDart <code>.cljd</code> files. #1589</li> <li>Slightly reduce OutOfMemory exceptions that may happen with the JVM version.</li> <li>Support ignore unused-public-vars via <code>:linters :clojure-lsp/unused-public-var :exclude-when-contains-meta</code> clj-kondo setting.</li> <li>Fix restructure-keys when map has an <code>:or</code>. #1583</li> <li>Bump lsp4clj to <code>1.8.0</code>.</li> <li>Add post startup tasks progress feedbacks, like \"Generating stubs\", \"Analyzing JDK source\" and \"Fetching Clojars\".</li> <li> <p>Bump cljfmt to <code>0.10.6</code>. #1605</p> </li> <li> <p>Editor</p> </li> <li>New code actions: <code>Replace ':refer :all' with ':refer [my-refer]'</code> and <code>Replace ':refer :all' with alias</code>. #1575</li> <li>Enhance java support for hover and completion of static class members.</li> <li>Improve <code>:paths-ignore-regex</code> to ignore features avoiding impact in huge files that are intented to be excluded.</li> <li>Fixed semantic-tokens for full qualified namespace</li> <li>Add <code>score</code> to completion items for a better completion client sorting. #1595</li> <li>Revamp keyword completion. #1599</li> <li> <p>Avoid LSP errors when cleaning a file without namespaces. #1603</p> </li> <li> <p>API/CLI</p> </li> <li>New feature: Find all references via API and CLI. #1572</li> </ul>"},{"location":"CHANGELOG/#20230504-193801","title":"2023.05.04-19.38.01","text":"<ul> <li>General</li> <li> <p>Bump clj-kondo to <code>2023.04.15-20230503.152749-8</code></p> </li> <li> <p>Editor</p> </li> <li>Fix edn tree to consider symbols. #1556</li> <li>Fix edn tree to consider vector root nodes. #1557</li> <li> <p>Fix edn tree to handle invalid edn code and not throw exceptions while typing code.</p> </li> <li> <p>API/CLI</p> </li> <li>Avoid enabling unecessary analysis features for API/CLI lint, improving memory usage.</li> </ul>"},{"location":"CHANGELOG/#20230419-124329","title":"2023.04.19-12.43.29","text":"<ul> <li>General</li> <li>Fix reflection issue in JDK19 with <code>Thread/sleep</code> #1520</li> <li>Bump clj-kondo to <code>2023.04.15-20230418.173453-3</code>, fixing analysis inconsistencies with <code>schema.core</code></li> <li>Ignore vars defined wrongly via config. #1510</li> <li> <p>Add support for <code>:output {:langs true}</code> in clj-kondo config to show <code>.cljc</code> language contexts</p> </li> <li> <p>Editor</p> </li> <li>Fix classpath issue message to properly ignore or retry after user input. #1500</li> <li>Decreate debounce time for calculating changes and diagnostics, improving UX in cost of performance, it doesn't seem to highly affect performance though.</li> <li>Add new setting to change diagnostics range type. #1530</li> <li>Spec compliance: avoid registering client capabilities if dynamic registration is not set. #1535</li> <li>Improve java support: using new <code>java-member-definitions</code> analysis, first feature is the allow completion of static members (fields and methods) for java classes.</li> <li>Show edn tree when in edn files via <code>documentSymbol</code> feature.</li> <li>Improve java db cache consistency + analysis performance.</li> </ul>"},{"location":"CHANGELOG/#20230227-131212","title":"2023.02.27-13.12.12","text":"<ul> <li>Editor</li> <li>Fix exception on hover feature on graal images.</li> </ul>"},{"location":"CHANGELOG/#20230226-234605","title":"2023.02.26-23.46.05","text":"<ul> <li>General</li> <li>Add new setting <code>:paths-ignore-regex</code> to allow ignore analyzing/linting specific paths, useful if you have folders or files that are not relevant to be linted and are huge which may affect performance.</li> <li>Bump clj-kondo. Fixes missing lint class constructors, making clojure-lsp show add import code action always.</li> <li> <p>Fix wrong ns rename for cljc files. #1508</p> </li> <li> <p>Editor</p> </li> <li>Fix cache issue: wrong external dependencies analysis when running clojure-lsp in editor after running on CLI, affecting navigation. #1473</li> <li>Bump lsp4clj fixing progress notifications during initialization for Calva.</li> <li>Allow go to definition of namespace even when the var is not known. Ex: <code>clojure.string/foo</code> will go to the definition of <code>clojure.string</code>. This is useful for cases where the var was not created yet but user wants to go to the ns to check the available functions or check the correct name of the function.</li> <li>Avoid basing results on old analysis.</li> <li>Add new setting <code>:completion :analysis-type</code> to choose between <code>:fast-but-stale</code>(default) or <code>:slow-but-accurate</code>, this should define whether completion should wait for changes that may still happening, this by default reverts the behavior introduced after #1425. #1487</li> <li>Fix <code>textDocument/hover</code> issue when doc metadata isn't a string literal.</li> <li>Follow references to other vars in doc metadata for use in <code>textDocument/hover</code>.</li> <li>Support <code>:arglists</code> meta when finding docs of functions via hover feature. #1504</li> <li>Enhance hover to search clojuredocs on CLJS. #1506</li> </ul>"},{"location":"CHANGELOG/#20230126-110816","title":"2023.01.26-11.08.16","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2023.01.20</code></li> <li>Avoid false-positives of unused-public-var for functions used in :gen-class that starts with <code>-</code> as convention. #1443</li> <li>New jar available on releases: <code>clojure-lsp-server.jar</code>, an Uberjar not aot-ed containing both clojure-lsp core + server code, improving startup time for JVM clients, for example for <code>lein-clojure-lsp</code>. Any lib using <code>clojure-lsp-standalone.jar</code> should consider switch to this new jar.</li> <li>Change <code>:source-paths-ignore-regex</code> default value to <code>[\"target.*\"]</code>, removing resource folders. #1452</li> <li>Bump cljfmt to 0.9.2</li> <li>Bump lsp4clj to 1.7.0</li> <li> <p>Support <code>:style/indent</code> metadata for indentation with cljfmt #1420</p> </li> <li> <p>Editor</p> </li> <li>Fix add missing import code action when there are multiple options. #1422</li> <li>Only show completion items if no changed code is being processed, avoiding wrong completion items. #1425</li> <li>Improve semantic tokens for defprotocol, definterface coloring as <code>interface</code> tokens.</li> <li>Include reffered vars in completion. #1440</li> <li>Allow rename alias of function calls, renaming properly both function usages and alias definition.</li> <li>Add support for keyword analysis in edn files, allowing find-references, document highlight and other lsp features to keywords.</li> <li>find-definition and references for quoted symbols like <code>'clojure.core/inc</code> and symbols mentioned in <code>.edn</code> files. #1446</li> <li> <p>Show error messages when can't apply edits after commands. #1448</p> </li> <li> <p>API/CLI</p> </li> <li>Make diagnostics command print as json or edn. #1419</li> <li>Make possible starting a chan server with clojure-lsp components, useful to other clients extend.</li> <li>Consider edn files when linting project, allowing to format edn files. #1452</li> <li>Report diagnostics lines and columns as 1 based, not 0 like LSP, following clj-kondo standard. #1459</li> </ul>"},{"location":"CHANGELOG/#20221209-155110","title":"2022.12.09-15.51.10","text":"<ul> <li>General</li> <li>Fix rename issue with VS-Code/Calva on MS-Windows. #1388</li> <li>Only publish progress on initialize if client provided a <code>workDoneProgress</code>. #1363</li> <li>Bump clj-kondo to <code>2022.12.08</code>.</li> <li>Avoid wrong clj-kondo configs in case clojure-lsp process is spawned from a different directory than project-root.</li> <li> <p>Fall back on CLJS var when finding definition from Clojure and nothing was found. #1403</p> </li> <li> <p>Editor</p> </li> <li>Show better icons for multimethods, var-arg fns, protocols, records, interfaces and types on <code>workspace/symbol</code> and <code>textDocument/documentSymbol</code>.</li> <li>Inlining the last binding of a let removes the let. #210</li> <li>Allow import java classes via code-actions <code>Add import 'x.y.Z'</code>.</li> <li>Make <code>add-import</code> command/code-action smarter, checking if there is already a package import to just include the classname instead of full import.</li> <li>Add new refactoring <code>cycle-keyword-auto-resolve</code>, e.g. <code>::bar</code> -&gt; <code>:foo/bar</code> and vice-versa. #1128</li> <li>Supporting find definition/references/implementations of <code>definterface</code>.</li> <li> <p>Avoid watching ignored source-paths, causing find-definition/references and other features go to wrong files.</p> </li> <li> <p>API/CLI</p> </li> <li>Allow specify analysis type for <code>dump</code> command, default to analyze project only analysis. #1383</li> <li>Add <code>:result</code> to the dump command. #1390</li> <li>Important regression fix where clojure-lsp may do inconsistent lint when classpath scan fail without showing to user the error.</li> </ul>"},{"location":"CHANGELOG/#20221103-001457","title":"2022.11.03-00.14.57","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2022.11.02</code> avoiding breaking changes on custom hooks.</li> <li> <p>Bump graalvm to 22.3.0. #1345</p> </li> <li> <p>Editor</p> </li> <li>Add refactorings to change param order of <code>defn</code>/<code>defmacro</code>, also changing call sites. #1131</li> <li>Avoid shadowing existing locals when restructuring keys. #1229</li> <li>Let editors control whether the server's log includes traces of the messages they are exchanging. https://github.com/clojure-lsp/lsp4clj/issues/27</li> <li>Bump promesa to <code>9.0.470</code></li> <li>Bump lsp4clj to <code>1.5.0</code></li> <li>For users with fewer cores, avoid unnecessary waits for file analysis.</li> <li>Reduce CPU usage by aborting requests that the client won't use.</li> <li>Fix to mark some code actions as preferred, so editors can emphasize them. https://github.com/clojure-lsp/lsp4clj/issues/32</li> <li>Adds java classes completions, since clj-kondo now knows all java classes defined on external dependencies. #1329</li> <li>Fix completion to consider required namespaces without alias or refers. #1352</li> </ul>"},{"location":"CHANGELOG/#20221005-163951","title":"2022.10.05-16.39.51","text":"<ul> <li>General</li> <li>Improve clj-depend merge config to overwrite <code>source-paths</code> only if it is nil or empty.  #1264</li> <li>Fix stubs generation issue on MS-Windows, coming out of enabling all integrations tests on windows. #1211</li> <li>Improve MS-Windows support by fixing various path, URI and line ending issues coming out of repairing the unit tests suite on windows. #1211</li> <li>End dep-graph-queries experiment; clojure-lsp now uses the dep-graph to optimize queries whenever possible</li> <li>Bump clj-kondo to <code>2022.10.05</code>. #1226</li> <li>Fix issue with changes being reporting with spurious and incorrect line endings on MS-Windows text files. #1211</li> <li>Index internal data by URI instead of filename, to minimize conversion between these formats when running queries. #1207</li> <li>Add support to enable trace logs on server via <code>--trace</code> flag. (For latest Emacs's lsp-mode this can be enabled easyly via <code>lsp-clojure-trace-enable</code> variable)</li> <li> <p>Bump graalvm version for MS-Windows to 22.2.0, in sync with the other archs. #1211</p> </li> <li> <p>Editor</p> </li> <li>Fix to avoid error when checking code actions from an #_x uneval node. #1227</li> <li>Add support to decompile jar as a java project when finding the definition of a java class, allowing to have LSP features on that java project. #1187</li> <li>Add refactorings similar to <code>Sort map</code>: <code>Sort vector</code>, <code>Sort list</code>, <code>Sort set</code>, and <code>Sort clauses</code> for functions like <code>assoc</code>. #1155</li> <li>Support java class decompilation for zipfile scheme (vim users).</li> <li>Avoid keeping diagnostics of external closed files for Calva. https://github.com/BetterThanTomorrow/calva/issues/1864</li> <li>Lint opened files after a clojure-lsp or clj-kondo config file is saved on disk, avoiding users to re-edit files. #1247</li> <li>Allow find definition of java class usages where definition comes from clojure, like defrecords.</li> <li>Fix: wait for rename to apply before allowing another rename, to ensure suggested name is correct. #1270</li> <li>Process requests in parallel, to prevent typing lag and other performance problems introduced during migration away from lsp4j. #1240</li> <li>Fix: Avoid wrong ns require after <code>Create ns and require</code> code-action/command.</li> <li>Fix: Avoid errors when a file starts with a comment. #1252</li> <li> <p>Bump promesa to <code>9.0.462</code> and use it for parallel request processing.</p> </li> <li> <p>API/CLI</p> </li> <li>Fix missing diagnostics when <code>--project-root</code> is different than current directory. #1245</li> <li>Add new <code>dump</code> feature, returning analysis, project information, dependency-graph and others. Check <code>clojure-lsp.api/dump</code> for more information. #744</li> <li>Improve CLI output avoiding logs from clj-kondo which are already available via verbose log.</li> </ul>"},{"location":"CHANGELOG/#20220901-152731","title":"2022.09.01-15.27.31","text":"<ul> <li>General</li> <li>Remove dependency on lsp4j. https://github.com/clojure-lsp/lsp4clj/issues/8</li> <li>Fix extra space on :import when sorting classes. #1152</li> <li>Bump Graalvm from 22.0.0.2 to 22.2.0 improving binary performance/size. #1154</li> <li>Bump clj-kondo to <code>2022.08.03</code>.</li> <li>General release of dep-graph-queries, improving query performance. See prior release for feature details.</li> <li>Generate nightly builds for macos aarch64 (M1/M2) every push on master.</li> <li>Bump lsp4clj to <code>1.2.1</code>.</li> <li>Bump cljfmt to <code>0.9.0</code>.</li> <li>Fix issue with classpath clojure build tools invocation on MS-Windows. #1132</li> <li> <p>Bump babashka/fs to <code>0.1.11</code>.</p> </li> <li> <p>Editor</p> </li> <li>Improve completion sorting, showing locals before functions and other completion items. #1158</li> <li>Fix hover to show current var definition docs instead of <code>def</code>/<code>defn</code>. #1157</li> <li>Improve hover for requires to show ns docstring. #1171</li> <li>Fix destructuring of things that have been destructured before. #1156</li> <li>Some completions require that a new alias be added to the ns form. Fix this feature for Calva users, and improve performance for all users. #1068</li> <li>Fix resolve-macro-as code action corner case. #1084</li> <li>Ensure line numbers provided by document-symbol correspond to the latest version of the file. #1178</li> <li>Avoid exceptions when clients use URIs that don't exist on disk.</li> <li>Fix documentation on completion items. #1181</li> <li>Fix rename of defrecords. #1165</li> <li>Fix to send all diagnostics to client at startup, even in very large projects. #1153</li> <li>Fix to preserve kebab-casing in server-info-raw. #1195</li> <li>Add refactoring <code>Restructure keys</code>, the inverse of <code>Destructure keys</code>. #1170</li> <li>Add refactorings to convert between <code>(:x m)</code> and <code>(get m :x)</code> or <code>(:y (:x m))</code> and <code>(get-in m [:x :y])</code>. #1172</li> <li>Add support to imported java class on completion. #1193</li> <li>Add new question to skip or retry classpath scan during startup if failed.</li> <li>Improve performance of processing of changed files outside editor calling clj-kondo in batch. #1205</li> <li>When renaming a keyword that is also a destructured key, rename its local usages too. #1192</li> </ul>"},{"location":"CHANGELOG/#20220724-182543","title":"2022.07.24-18.25.43","text":"<ul> <li>General</li> <li> <p>Bump <code>cljfmt</code> from 0.8.0 -&gt; 0.8.2</p> </li> <li> <p>Editor</p> </li> <li>Add clojure.core/fn to resolve-macro-as options. #1094</li> <li>Restore #995 Improve element selected on <code>textDocument/hover</code> (previously reverted) with a fix that keeps it working for Calva even after a syntax error is introduced.</li> <li>Improve call hierarchy performance by parsing less frequently. #1092</li> <li>Improve system wide performance by keeping a graph of dependencies between namespaces. #990 #1053     Enable setting <code>:experimental {:dep-graph-queries true}</code> to beta test this feature.</li> <li>Improve performance by adding second level of analysis indexing.</li> <li>Improve performance of things that need keyword definitions, like completion and custom lint.</li> <li>Fix hover showing previous function elements on some cases. #1098</li> <li>Fix: find definition will find registration of unnamespaced keyword.</li> <li>Fix to update unused-public-var lint on registered keywords as usages change in other files. #1018</li> <li>Fix to navigate to var defined by declare, when there aren't any later defs. #1107</li> <li>Fix to always go to the definition of the correct var imported by potemkin. #1020</li> <li>Fix to correctly rename namespaces. #1121</li> <li>Fix to correctly :keep require and import indent spacing. #1141</li> <li>Improve accuracy of progress reporting during uncached startup. #1134</li> <li>Add refactoring <code>Destructure keys</code> to destructure keywords. #905</li> <li>Add refactoring <code>Extract to def</code> to create a <code>def</code> from the thing under the cursor. #1136</li> <li>Include defmethods in document and workspace symbols. #1016</li> </ul>"},{"location":"CHANGELOG/#20220629-193213","title":"2022.06.29-19.32.13","text":"<ul> <li>Editor</li> <li>Reverted #995 Improve element selected on <code>textDocument/hover</code>, as it caused clojure-lsp to stop working for Calva users after a syntax error was introduced. #1080</li> </ul>"},{"location":"CHANGELOG/#20220622-140950","title":"2022.06.22-14.09.50","text":"<ul> <li>General</li> <li>clojure-lsp has a flake.nix now, being able to be built using clj-nix. #999</li> <li>Remove <code>use-source-paths-from-classpath</code> setting, its value was already true and disabling it could cause false-positives.</li> <li>Add <code>compute-external-file-changes</code> setting as true by default, when enabled it will consider file changes outside editor like git branch changes and update analysis, avoiding the need to restart server when a file is changed outside editor, this will only work if client file-watchers is enabled. #1002</li> <li>Bump lsp4clj to 0.4.1.</li> <li>Remove deprecated disabled setting <code>:linters :clj-kondo :async-custom-lint?</code>. #1017</li> <li>Fix references and code lens of defrecord/deftype for cljs files. #1055</li> <li>Fix clean-ns to move reader conditionals to before normal requires. #1057</li> <li>Add new optional linter: clj-depend integration. #957</li> <li>Add new setting <code>:source-paths-ignore-regex</code> to filter source-paths that are auto generated for example for cljs projects, the default value should be enought for most cases (<code>[\"resources.*\" \"target.*\"]</code>), replacing old <code>ignore-classpath-directories</code>.</li> <li> <p>Bump clj-kondo to 2022.06.22.</p> </li> <li> <p>Editor</p> </li> <li>Add support to rename namespace of namespaced keywords like re-frame events/subs. #978</li> <li>Improve performance of find-declaration feature. #1021</li> <li>Fix to avoid suggesting an alias from a clj file to a cljs file. #1024</li> <li>Find references of namespace usages now find all namespace usages on project, not only the definition. #1022</li> <li>Improve element selected on <code>textDocument/hover</code>, showing the function being called instead of the closest element found backwards. #995</li> <li>Fix drag from quoted symbols and other special nodes #969</li> <li>Drag requests two smaller edits, instead of one large edit, potentially avoiding flicker. #1043</li> <li>Drag is disabled between clauses, to avoid arbitrarily choosing one to move. #1030</li> <li>Cursor doesn't move within dragged clause. #1029</li> <li>Improve performance of drag forward.</li> <li>Avoid invalid cached analysis and document text after a rename. #1049</li> <li>Improve lint performance by only linting references files when usage is added or removed. #1019</li> <li>Extracted functions are private. #1039</li> <li>Fix errors when Emacs lock files are linted. #1054</li> </ul>"},{"location":"CHANGELOG/#20220531-173550","title":"2022.05.31-17.35.50","text":"<ul> <li>General</li> <li>Bump clj-kondo to 2022.05.31</li> <li>Consider <code>.clj_kondo</code> files as clj files.</li> </ul>"},{"location":"CHANGELOG/#20220523-131811","title":"2022.05.23-13.18.11","text":"<ul> <li>General</li> <li>Allow specify how many classes clojure-lsp should check before moving sorted package imported classes to next line. #966</li> <li>Allow <code>:linters</code> to be configured by LSP clients passing string keys/values. #977</li> <li>Support clj-kondo <code>:config-in-ns</code> and <code>:ns-groups</code> for <code>clojure-lsp/unused-public-var</code> linter. #981</li> <li> <p>Improve clean-ns correct positioning of multiple refers.</p> </li> <li> <p>Editor</p> </li> <li>Fix powershell.exe command execution error on Windows</li> <li>Fix drag in <code>are</code> when <code>clojure.test</code> is aliased. #967</li> <li>Reduce time to calculate semantic tokens, reducing CPU usage in large files. #970</li> <li>Fix JDK global cache load when jdk source were already analyzed on previous sessions, fixing finding definition of jdk classes not working sometimes.</li> <li>Fix command move-form not working.</li> <li>Fix find definition of macros required by :require-macros on cljs files. #980</li> <li>Add support to completion keywords found on function definition <code>:keys</code> destructuring, improving completion on api calls.</li> <li> <p>Avoid duplicate parens when inserting snippets during completion. #982</p> </li> <li> <p>CLI/API</p> </li> <li>Make all cli features open files faster, improving speed of all CLI/API features. Fixes #985</li> </ul>"},{"location":"CHANGELOG/#20220503-123540","title":"2022.05.03-12.35.40","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2022.04.26-20220429.192438-2</code>.</li> <li>Decrease uncached startup time by 60-70%, by instructing clj-kondo to skip var definition bodies when analyzing deps. #1674</li> <li>Improve speed of alias/ns completions.</li> <li>Change alias/ns completions to return a label that matches the input.</li> <li>Support sorting classes inside package imports during <code>clean-ns</code>. #932</li> <li>Avoid saving duplicate source-paths, not calling clj-kondo to analyze same filenames multiple times, improving startup speed.</li> <li> <p>Improve progress report both on editor and CLI using new clj-kondo callback feature.</p> </li> <li> <p>Editor</p> </li> <li>Support <code>workspace/willRenameFiles</code>, renaming namespaces and all its references when a file is renamed.</li> <li>Don't save cache when classpath lookup failed.</li> <li>Wait for editor to apply edits before requesting cursor re-positioning. Fixes cursor positioning after drag in Calva.</li> <li> <p>drag: Request edit only of changed clauses, not entire parent, reducing flicker.</p> </li> <li> <p>CLI/API</p> </li> <li>Bump lsp4clj to <code>0.3.0</code>.</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20220418-005932","title":"2022.04.18-00.59.32","text":"<ul> <li>General</li> <li>Improve settings documentation.</li> <li>Fix completion performance regression from previous release.</li> <li>Consider <code>.bb</code> and <code>.cljd</code> files as clj files. #906</li> <li>Bump to clojure 1.11.0</li> <li>Improve analysis query performance as a whole for lots of features. #916</li> <li>Bump clj-kondo to <code>2022.04.09-20220414.123207-3</code> fixing semantic tokens for <code>:require</code>, <code>:refer</code> and <code>:as</code>. #1609</li> <li>Move <code>lsp4clj</code> to outside clojure-lsp to its own repo/jar release.</li> <li>Fix local files outside source-paths not being linted even if opened/changed.</li> <li>Consider filename + lastModified as checksum for external files, avoiding analyzing it if analysis is already present.</li> <li>graalvm: Compile static linux with --musl for better compatibility. #868</li> <li>java: Use <code>XDG_CACHE_HOME</code> or <code>.cache/clojure-lsp</code> instead of config files for JDK cache.</li> <li>java: Cache JDK analysis globally avoiding high CPU usages after startup.</li> <li> <p>java: Add <code>:java :home-path</code> setting for easier way to specify java location for JDK source analysis. #907</p> </li> <li> <p>Editor</p> </li> <li>Introduce ALPHA move-form command. #566</li> <li>Rename \"Move coll entry up/down\" to \"Drag forward/backward\", matching Calva/Paredit terminology</li> <li>drag: clauses move intuitively in <code>clojure.test/are</code></li> <li>drag: top-level forms can be dragged #891</li> <li>Improve completion performance for most cases, reducing time to compute clj/cljs core symbols.</li> <li>completion: suggest functions defined in Clojure 1.10 and 1.11</li> <li>completion: Fix to no require extra ns when alias is already required. #920</li> <li>promote-fn: new feature Promote a fn to a top-level defn. #783 @mainej<ul> <li>promote-fn can also promote a literal #() to a fn</li> </ul> </li> <li>demote-fn: Demote a fn to a literal #()</li> <li>breaking remove cycle-fn-literal, since the same refactorings can be performed with the more clearly named promote-fn and demote-fn</li> <li>drag: Fix to drag element-wise in destructured keys, not pair-wise. #927</li> <li> <p>test-tree: reduce CPU usage, especially during startup</p> </li> <li> <p>CLI</p> </li> <li>Reduce CPU and wall-clock time in cli commands clean-ns and diagnostics</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20220331-200020","title":"2022.03.31-20.00.20","text":"<ul> <li>Fix URI resolver on java JDK logic.</li> <li>Fix zipfile scheme when finding external deps.</li> </ul>"},{"location":"CHANGELOG/#20220331-142114","title":"2022.03.31-14.21.14","text":"<ul> <li>Add java class find-definition support, decompiling .class files when available. #762</li> <li>Add JDK source discoverability feature, searching for installed JDK for later analyze with clj-kondo and support java classes interop.</li> <li>Add <code>:java :download-jdk-source?</code> setting to download JDK source after startup if not cached before globally or found locally. Disabled by default.</li> <li>Avoid high CPU usage and freezes by more efficiently finding referenced files to notify on file change. #844 @mainej</li> <li>Bump clj-kondo to <code>2022.03.10-20220331.135739-32</code> improving java analysis and fixing a critical regression for re-frame. #888</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20220326-184708","title":"2022.03.26-18.47.08","text":"<ul> <li>Fix unused-public-var not considering excluding comments, changing <code>async-custom-lint?</code> setting to false.</li> </ul>"},{"location":"CHANGELOG/#20220325-120259","title":"2022.03.25-12.02.59","text":"<ul> <li>General</li> <li>Fix cljfmt settings merge during refresh/classpath configs merge to avoid multiple config vectors on same symbol.</li> <li>Fix install script for aarch64. #794</li> <li>Fix handling cljfmt config files that end in <code>.clj</code> https://github.com/weavejester/cljfmt/issues/190</li> <li>parser: more efficiently seek to cursor position, improving performance especially in large files. #793 @mainej</li> <li>Fix clean-ns not sorting properly node requires for cljs. #815</li> <li>Fix move-to-let to ensure locals don't move out of scope. #830</li> <li>Improve logic around require suggestions. #837</li> <li>Enhance move-to-let to introduce and expand let if an existing one doesn't exist. #829</li> <li>Bump <code>org.clojure/clojure</code> to <code>1.11.0</code>.</li> <li>Fix move-coll-entry to maintain cursor position instead of a range. #862</li> <li> <p>Clean ns automatically after adding missing require/imports, enabled by default under new <code>:clean :automatically-after-ns-refactor</code> flag. #558</p> </li> <li> <p>Editor</p> </li> <li>extract-function: Fix wrong args when extracting from multi-arity fn. #683</li> <li>extract-function: Fix wrong args when extracting after a local usage. #812 @mainej</li> <li>move-coll-entry: clauses move intuitively in <code>assoc</code>, <code>case</code>, <code>cond</code>, and similar functions. #780 @mainej</li> <li>move-coll-entry: fix NPE when when invoked from top-level #803 @mainej</li> <li>Generate stubs async after startup, improving startup time. #788</li> <li>Improve and add lots of new snippets following practicalli config. #797</li> <li>Improve how watched new files are analyzed avoiding infinite loops and performance issues. #796</li> <li>Avoid infinite loops when several files are changed simultaneously. #796 @mainej</li> <li>Fix \"incoming call hierarchy\" not considering usages inside defmethods. #808</li> <li>range-formatting: more efficiently locate extent of range and reduce number of calls to cljfmt, improving performance especially when formatting large ranges. #795 @mainej</li> <li>cycle-fn-literal: new feature convert between function-literal syntaxes <code>(fn [] ...)</code> &lt;-&gt; <code>#(...)</code>. #774</li> <li>Add find-implementation feature to <code>defmulti</code> and <code>defmethod</code>. #751</li> <li>Make find-implementation of <code>defprotocol</code> names find its implementations and find-implementation on <code>deftype</code>/<code>defrecord</code> methods find other implementations.</li> <li>Add new code action <code>Introduce let</code> for existing command. #825</li> <li>Make find-implementations consider <code>reify</code>. #827</li> <li>Fix namespace on file creation when nested source-paths are available. #832</li> <li>unused-public-var: fix to show warnings on vars defined with declare. #840</li> <li> <p>unused-public-var: large performance improvements, especially for large projects. #861 @mainej</p> </li> <li> <p>API/CLI</p> </li> <li>Extract lsp4clj as a seperate library. #807 @Cyrik Supported by Scarlet</li> <li>Fix inconsistency with clean-ns/format not copying kondo configs.</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20220223-121212","title":"2022.02.23-12.12.12","text":"<ul> <li>General</li> <li>Use <code>:source-aliases</code> setting during default deps.edn and lein project-spec aliases, avoiding the need to configure a whole project-spec just because of a additional alias.</li> <li>Exclude from unused-public-var linter vars with metadata <code>^:export</code>. #753</li> <li>Fix clean-ns multiple refers sort when there is a alias before the refers.</li> <li>Bump clj-kondo from <code>2022.01.15</code> to <code>2022.02.09</code> adding support for implementation analysis and more improvements.</li> <li>Medium performance improvement during startup when unused-public-var linter is disabled.</li> <li>Medium performance improvement during startup on unused-public-var calculation parallelizing calculations.</li> <li>Small performance improvement on code actions calcullation.</li> <li>Add <code>:use-source-paths-from-classpath</code> setting defaulting to true, which makes clojure-lsp do not manually discovery source-paths but get from classpath excluding jar files and paths outside project-root. #752 #551</li> <li>Improve completion performance when all clojure.core or cljs.core symbols are valid completions. #764, #771 @mainej</li> <li>Fix scenarios where the lint findings in individual files differed from what you'd expect based on the .clj-kondo/config.edn settings.</li> <li>Add <code>:exclude-regex</code> and <code>:exclude-when-definted-by-regex</code> to <code>:clojure-lsp/unused-public-var</code> linter.</li> <li> <p>Bump <code>org.clojure/clojure</code> to <code>1.11.0-rc1</code>.</p> </li> <li> <p>Editor</p> </li> <li>Fix exception during code actions calculation when in a invalid code of a map with not even key-pairs.</li> <li>Don't return diagnostics for external files like files on jar dependencies, avoiding noise on lint when opening dependencies.</li> <li>Support finding implementations of defprotocol and references of defrecord/deftype, implementing LSP method <code>textDocument/implementation</code>. #656</li> <li>Make the actions and commands aware of when they were invoked from comments or whitespace. This will allow individual refactorings to be more deliberate about how they handle comments and whitespace. #716 @mainej</li> <li>Correctly position the cursor after calling move-coll-entry-down on an entry with leading comments. #758 @mainej</li> <li>Don't return completions when invoked from a comment, avoiding performance problems. #756</li> <li>Fix small anomalies in parameter names of extracted private functions. #759 @mainej</li> <li>Add semantic tokens for protocol implementations methods like defrecord and deftype.</li> <li> <p>Small performance improvevement on code lens calculation using transducers.</p> </li> <li> <p>API/CLI</p> </li> <li>Small performance improvement to <code>format</code>, <code>clean-ns</code>, <code>diagnostics</code>, and <code>rename</code> via parallelizing parts of the logic.</li> <li>Fix edn-&gt;json parser of <code>serverInfo/raw</code> for Calva use cljfmt configuration. #763</li> <li>Add <code>:cljfmt-raw</code> config to <code>serverInfo/raw</code> for Calva. #768</li> <li>Add support for passing specific <code>--filenames</code> for most actions. #775</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20220201-200232","title":"2022.02.01-20.02.32","text":"<ul> <li>General</li> <li>Fix classpath hash regression introduced by last release</li> </ul>"},{"location":"CHANGELOG/#20220201-165314","title":"2022.02.01-16.53.14","text":"<ul> <li>General</li> <li>Migrate project from depstar -&gt; tools.build. #711</li> <li>Improve classpath hash to consider invaliding cache when local root deps was changed.</li> <li>Replace datalevin cache db with transit. #703</li> <li>Bump Graalvm from 21.3.0 to 22.0.0.2 improving binary performance/size</li> <li> <p>Update <code>XDG_CONFIG_HOME</code> to clojure-lsp directory in doc/settings.md</p> </li> <li> <p>Editor</p> </li> <li>Support going to namespace definition on an alias. #706</li> <li>Add LSP <code>textDocument/declaration</code>, for now adding the making possible navigate to alias and namespaces declared on the namespace. #680</li> <li>Fix removal of file analysis on didClose for external files like jars. #717</li> <li>Fix cursor not moving when using code actions that move the cursor automatically.</li> <li>Fix additional-snippets to work on top-level forms as well.</li> <li>Fix resolve completion item not returning insertText. #719 @Cyrik</li> <li>Remove support for LSP <code>codeAction/resolve</code>. It added complexity and was not used in a way that improved performance of the action menu. #722, #725, #726</li> <li>Fix create public function refactoring not working when function is not a function call.</li> </ul>"},{"location":"CHANGELOG/#20220122-013109","title":"2022.01.22-01.31.09","text":"<ul> <li>General</li> <li>Fix freezing in some cases during clojure-lsp startup linting. #708</li> </ul>"},{"location":"CHANGELOG/#20220120-141243","title":"2022.01.20-14.12.43","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2022.01.15</code>.</li> <li>Add <code>:classpath</code> to <code>serverInfo</code> command for downstream usages.</li> <li>Fix issues in <code>extract-function</code> that arise when operating over <code>.cljc</code> files.</li> <li>Add setting <code>:copy-kondo-configs?</code> to allow disable auto clj-kondo config copy, enabled by default. #694</li> <li>Lint unused public keywords, like unused re-frame events/subs. #691</li> <li>Fix rename of namespaced keywords -&gt; aliased keywords. #665</li> <li>Huge refactor on clojure-lsp codebase, spliting code into submodules, this made possible remove a lot of deps from API jar and help separate clojure-lsp features in the future. #658</li> <li> <p>Send testTree notification for all project test files after clojure-lsp start. #697</p> </li> <li> <p>Editor</p> </li> <li>Improve 'create function' refactor code action handling multiple cases. #682</li> <li>Fix 'resolve macro as ...' code action not working.</li> <li>Fix <code>showDocumentRequest</code> issues when triggered via some refactor code action.</li> <li> <p>Add new code actions + commands <code>Move coll entry down</code> and <code>Move coll entry up</code> to move entries within collections. #684, #701</p> </li> <li> <p>API/CLI</p> </li> <li>Make <code>format</code>, <code>clean-ns</code> and <code>rename</code> features not need to scan whole classpath, analyzing only project code improving performance a lot.</li> </ul>"},{"location":"CHANGELOG/#20220103-194610","title":"2022.01.03-19.46.10","text":"<ul> <li>Catch clj-kondo prints to stdout and log to clojure-lsp log file avoiding crashes on some clients like vscode/Calva.</li> </ul>"},{"location":"CHANGELOG/#20220103-154119","title":"2022.01.03-15.41.19","text":"<ul> <li>General</li> <li> <p>Fix some analysis conflicts regarding <code>custom-async-lint?</code> feature introduced on latest release causing outdated analysis and some deadlocks.</p> </li> <li> <p>Editor</p> </li> <li>Fix inline symbol code action regression from previous releases. #678</li> <li>Fix expand let refactor duplicating variables in some cases. #676</li> <li> <p>Add completion support to potemkin usages of a namespace.</p> </li> <li> <p>API/CLI</p> </li> <li>Wait for db cache upsert before end proccess, avoiding the need to re-lint whole classpath on next api/cli runs.</li> <li>Fix the need to use <code>:raw? true</code> on babashka pod usage.</li> </ul>"},{"location":"CHANGELOG/#20211220-003656","title":"2021.12.20-00.36.56","text":"<ul> <li>General</li> <li>Bump clj-kondo to <code>2021.12.19</code>, supporting auto-load configs, improving potemkin support, adding more linters and more.</li> <li>Merge <code>:cljfmt</code> settings with <code>:cljfmt-config-path</code> if file path exists.</li> <li>Avoid high CPU and lockup when clj-kondo throws exceptions. #671</li> <li>Allow absolute paths in deps.edn :local/root #672</li> <li>Fix clojure-lsp not loading for some mono-repo cases, improving local/root support for polylith projects. #673</li> <li>Avoid infinite loop because of cyclic dependencies on deps source-path discovery.</li> <li> <p>Add babashka pod. #555</p> </li> <li> <p>Editor</p> </li> <li>Change call hierarchy to return selection range of usage, not function definition.</li> <li>Return <code>edits</code> in <code>codeAction/resolve</code> responses rather than <code>commands</code>. #655</li> <li>Improve <code>:linters :clj-kondo :async-custom-lint?</code> to avoid infinite loops and default to <code>true</code>.</li> <li>Add new custom LSP feature Test Tree, which shows all test hierarchy of a file. #653</li> <li>Improve function name finding to consider other function definition types for some features. #666</li> <li> <p>Make <code>textDocument/hover</code> return the correct range from LSP spec, the element range instead of the element scope range.</p> </li> <li> <p>API/CLI</p> </li> <li>Exit process if any error during classpath lookup. Opt-out via <code>:api :exit-on-errors?</code> flag.</li> </ul>"},{"location":"CHANGELOG/#20211201-122816","title":"2021.12.01-12.28.16","text":"<ul> <li>General</li> <li>Add support for LSP method <code>textDocument/prepareRename</code> which it's the proper way to check if the rename will work correctly. #642</li> <li>Expose new custom method <code>clojure/cursorInfo/raw</code> for custom hack on current cursor information code. #645</li> <li>Support stub generation using <code>clj-easy/stub</code>, adding analysis and linting support for closed sources codes like Datomic. Check <code>:stubs</code> settings for more details. #637</li> <li>Handle config deep merge differently for collections, concating instead of overwriting.</li> <li>Fix unnecessary exception thrown on graal images during startup.</li> <li>Support <code>deps.edn</code> <code>:local/root</code> source-paths discovery, improving support for monorepo projects like <code>polylith</code>. #652</li> <li>New setting value for <code>:clean :sort :require</code>: <code>:lexicographic</code>. #654</li> <li> <p>Bump clj-kondo to <code>2021.10.20-20211126.151305-16</code>.</p> </li> <li> <p>Editor</p> </li> <li>Support completion on aliased keywords. #649</li> <li>Add new <code>Sort map keys</code> refactoring code action. #651</li> <li>Add new <code>Create function</code> code action, allowing to create a function on a existing namespace or creating a new namespace + the function. #646</li> <li>Improve <code>Extract function</code> refactoring to consider comments above current function.</li> <li>Experimental: new <code>:linters :clj-kondo :async-custom-lint?</code> setting, when true, scan unused-public-vars async improving lint/analysis UI feedback for huge buffers (&gt; ~1000 lines). Default <code>false</code>.</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20211116-165214","title":"2021.11.16-16.52.14","text":"<ul> <li>General</li> <li>Improve rename feature to not heavily rely on valid source-paths for most cases.</li> <li>Fix setTrace exception logs for graalvm native images.</li> <li>Huge improvements on namespaces renames and namespaces references find. #573</li> <li>Fix/Remove warnings during datalevin access.</li> <li>Improve freezing for some MacOS cases. #631</li> <li> <p>Bump clj-kondo to <code>2021.10.20-20211116.110002-7</code> improving code parsing and other fixes.</p> </li> <li> <p>Editor</p> </li> <li>Fix \"Add require\" code actions adding multiple requires instead of the selected.</li> <li>Improve \"Add require\" wording, making it easier to understand what each different action will do.</li> <li>Smart check all available refers to require, adding refer options to <code>Add require</code> code actions. #627</li> <li>Big improvements on keyword completions. #630</li> <li>Add setting <code>keep-parens-when-threading?</code> to keep parens for single arity functions when threading. #636</li> <li>Avoid adding duplicate requires when adding a new require via code action. #640</li> <li>Improve common known snippets to replace completion items, improving completion UX. #638</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20211102-152447","title":"2021.11.02-15.24.47","text":"<ul> <li>General</li> <li>Bump Graalvm from 21.2.0 to 21.3.0 improving binary performance/size</li> <li>Fix wrong parse of code when code contains namespaced maps like <code>#:foo{:bar 1}</code>. This issue was affecting a lot of features for example code actions.</li> <li>Bump datalevin from 0.5.26 to 0.5.27.</li> <li>Improve semantic tokens for dynamic vars, function definitions, namespaced and aliased keywords.</li> <li> <p>Fix bug where <code>:source-paths</code> settings could be hot-reloaded with wrong-value.</p> </li> <li> <p>Editor</p> </li> <li>Deprecates setting <code>:show-docs-arity-on-same-line?</code> in favor of <code>:hover</code> <code>:arity-on-same-line?</code>.</li> <li>Add support to new LSP <code>LinkedEditingRange</code> feature. #341</li> <li>Improve suggested <code>Add require ...</code> code actions, this should make clojure-lsp smarter when user wants to add a missing require. #614</li> <li>Change <code>:notify-references-on-file-change</code> default from <code>false</code> to <code>true</code>, we had some performance improvements and I've been testing this for some time now and didn't see any new issues with that. This should improve a lot the UX when user change any code that is references on other files, updating the diagnostics for those files as well.</li> <li>Improve rename feature UX to output errors when it's not possible rename.</li> <li>Add support for <code>window/showDocument</code> LSP method, used on <code>create-test</code> command/code action after creating the test to show the test file.</li> <li>Add new <code>Unwind thread once</code> and <code>Unwind whole thread</code> code actions to undo a thread call.</li> <li>Improve code actions performance requesting async all actions.</li> <li>Add new LSP custom method <code>clojure/clojuredocs/raw</code> which takes a symbol and a namespace (both strings) and returns any Clojuredocs entry found, otherwise <code>null</code>.</li> <li> <p>Fix missing keywords rename/references for destructured keywords.</p> </li> <li> <p>CLI</p> </li> <li>Show error/warning message when a classpath scan fail during analysis. Fixes #626</li> <li>Add coloring to <code>diagnostics</code> output matching diagnostic severity.</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20211020-164947","title":"2021.10.20-16.49.47","text":"<ul> <li>Editor</li> <li>Hot fix clojuredocs on graalvm native image.</li> <li>Bump clj-kondo to <code>2021.10.20-20211020.123254-3</code> to fix a specific issue with cljs.</li> <li>Implement support to return to client LSP Errors, making user UX better since clojure-lsp can return specific errors for specific exceptions.</li> </ul>"},{"location":"CHANGELOG/#20211020-130411","title":"2021.10.20-13.04.11","text":"<ul> <li>General</li> <li>Improve intialization feedback report messages.</li> <li>Consider <code>dev</code> and <code>test</code> alias for deps.edn projects as project-specs during classpath lookup. #586</li> <li>Avoid scanning source-paths twice, as it was being considered as part of external classpath as well.</li> <li>Change cache db from sqlite to datalevin for faster startup + better graalvm compatibility.</li> <li>Make the cache analysis save async to make startup faster.</li> <li>Support Auto refresh settings memoizing with a ttl of 1 second avoiding the need of restarting server when changing configs. #502</li> <li>Bump clj-kondo adding new <code>gen-class</code> linter and other fixes/improvements. Fixes #589</li> <li>Remove unused duplicate require if any. #527</li> <li>Fix crash on clean-ns when ns contains comments.</li> <li> <p>Improve project analysis filter to check source-paths. #597</p> </li> <li> <p>Editor</p> </li> <li>Add reference code lens for ns forms. #578</li> <li>Fix expand-let bug that occurs when a list form precedes let. #590</li> <li>Add new command to create test for function at point. #582</li> <li>Add new code action to create test for current function/var</li> <li>Add <code>private</code> to documentSymbol to make clear that a var or function is  <code>private</code>.</li> <li>Add new code action <code>Suppress xxx diagnostic</code>, adding clj-kondo comment code to ignore the diagnostic. #591</li> <li>Add more semantic tokens: aliases for macros, variable and function definitions.</li> <li>Add clojuredocs information during symbol hover. #571</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20210930-152801","title":"2021.09.30-15.28.01","text":"<ul> <li>Editor</li> <li>Hot fix hover content wrong type hinting.</li> </ul>"},{"location":"CHANGELOG/#20210930-122816","title":"2021.09.30-12.28.16","text":"<ul> <li>General</li> <li>Use lower-case for refer/import/require sorting. #560 #561</li> <li>Avoid removing comments when sorting/cleaning namespace. #559</li> <li>Break lines when sorting refers along with then new <code>:clean :sort :refer :max-line-length</code> setting with a default of <code>80</code>. #562</li> <li>Deprecate <code>lens-segregate-test-references</code> in favor to <code>:code-lens :segregate-test-references</code></li> <li>Check for a default <code>.cljfmt.edn</code> config file for cljfmt config settings if no <code>:cljfmt-config-path</code> was provided. #563</li> <li>Bump clj-kondo to <code>2021.09.25</code> fixing false-positives with potemkin import-var analysis.</li> <li>Re-scan whole project if any clj-kondo config changed for better consistence. #331</li> <li>Fix clojure-lsp not initializing when empty <code>project.clj</code>. #579</li> <li> <p>Support finding config in classpath via new setting<code>:classpath-config-paths [\"my-org/my-lib\"]</code>. #580</p> </li> <li> <p>Editor</p> </li> <li>Fix <code>resolve macro as</code> code action after regression introduced recently.</li> <li>Fix <code>unused-public-var</code> not being suppressed during project startup. #554</li> <li>Improve <code>hover</code> feature to return elements when inside a function call. #569</li> <li>Fix <code>create-private-function</code> command and code action to consider when new function is inside thread macros.</li> <li>Support <code>$/progress</code> LSP feature, sending notifications for client when server is starting, improving the feedback for the user.</li> <li> <p>Improve semantic tokens support for java classes and methods.</p> </li> <li> <p>API/CLI</p> </li> <li>Support renaming namespaces as well with <code>rename</code> feature.</li> <li>Use relative paths instead of absolute paths on diff messages.</li> <li>Add <code>analyze-project!</code> to analyze whole project only and cache analysis, useful for REPL usage for example.</li> <li>Follow same exit status from clj-kondo for <code>diagnostics</code> feature. #572</li> <li>Improve start project feedback reporting the percentage and specific message.</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20210913-222535","title":"2021.09.13-22.25.35","text":"<ul> <li>Editor</li> <li>Rollback change on <code>didChangeWatchedFiles</code> for <code>:change</code> events, avoiding outdated changes overwriting newer changes.</li> </ul>"},{"location":"CHANGELOG/#20210913-193200","title":"2021.09.13-19.32.00","text":"<ul> <li>General</li> <li>Create .clj-kondo folder if not exists in project root. #528</li> <li>Fix exception when <code>:clojure-lsp/unused-public-var</code> linter is <code>:off</code>. #546</li> <li>Bump clj-kondo to <code>2021.08.07-20210903.210340-28</code> to fix a false-positive with potemkin. https://github.com/clj-kondo/clj-kondo/issues/1370.</li> <li>Bump clj-kondo to <code>2021.08.07-20210909.131804-29</code> fixing issues with built-in clj-kondo cache not present on graalvm binaries. #548</li> <li>Exclude <code>cljs.test/deftest</code> from unused public vars linter.</li> <li>Migrate default db file from <code>.lsp/sqlite.db</code> to <code>.lsp/.cache/sqlite.db</code>, this is necessary as in the future we will replace sqlite with other db implementation, for users they just need to consider/gitignore the <code>.lsp/.cache</code> folder, this way any next change on db implementations or any other cache will not affect user.</li> <li>Auto migrate existing <code>.lsp/sqlite.db</code> to new <code>.lsp/.cache/sqlite.db</code> to avoid unnecessary project re-scan.</li> <li> <p>Deprecates <code>:sqlite-db-path</code> in place of <code>:cache-path</code>.</p> </li> <li> <p>Editor</p> </li> <li>Fix <code>didChangeWatchedFiles</code> to correctly create the file on server, properly change file content and re-scan with clj-kondo, or remove file analysis. This should improve LSP analysis reliability when changing files outside the editor. #536</li> <li>Improve completion only showing valid local vars for current cursor.</li> <li> <p>Improve completion sorting adding priority to each item, showing most used symbols like variables and functions first before other completion items.</p> </li> <li> <p>API/CLI</p> </li> <li>New <code>diagnostics</code> command, which return all diagnostics found by clojure-lsp (using clj-kondo). Check the API section for more details.</li> </ul> <p>This release was supported by Clojurists Together</p>"},{"location":"CHANGELOG/#20210904-171144","title":"2021.09.04-17.11.44","text":"<ul> <li>Hotfix java classes not present on jar, required for clojure-lsp downstreams.</li> </ul>"},{"location":"CHANGELOG/#20210903-004246","title":"2021.09.03-00.42.46","text":"<ul> <li>General</li> <li>Improve logging during startup for better troubleshooting.</li> <li>Refactor allowing calls to <code>clojure-lsp.main/run!</code> for manually passing args, useful for <code>lein-clojure-lsp</code> for example.</li> <li>Internal: Move graalvm configuration to sqlite-jdbc.</li> <li>Recognize <code>deftest</code> as function definition form for refactoring features like <code>extract-function</code>.</li> <li> <p>Bump Graalvm from 21.1.0 to 21.2.0</p> </li> <li> <p>API/CLI</p> </li> <li> <p>Use clj-kondo custom lint for API as well, required for correct diagnostics API feature.</p> </li> <li> <p>Editor</p> </li> <li> <p>Fix regression, custom <code>source-paths</code> from initializationOptions were not being parsed correctly. #537</p> </li> <li> <p>Documentation</p> </li> <li>New domain for documentation and webpage https://clojure-lsp.io </li> </ul>"},{"location":"CHANGELOG/#20210824-144156","title":"2021.08.24-14.41.56","text":"<ul> <li>General</li> <li>Fix classpath scan when classpath has other things like new lines or warning message besides the classpath. Fixes #523</li> <li>Improve <code>clean-ns</code> to remove empty reader conditionals(<code>#?(:clj)</code> or <code>#?@(:clj [])</code> on ns form) after cleaning requires/imports.</li> <li>Fix <code>clean-ns</code> false-positives removals to cljc files when the alias/refer/import is being used inside a reader conditional.</li> <li>Add new setting <code>:linters :clj-kondo :ns-exclude-regex</code> which allows exclude diagnostics/findings for namespaces matching that regex.</li> <li> <p>Fix merge of configs resolved for projects with multiple configurations in parent folders and subprojects.</p> </li> <li> <p>Docs</p> </li> <li>Improved the settings docs with a new link to a file with all available clojure-lsp settings.</li> </ul>"},{"location":"CHANGELOG/#20210816-190230","title":"2021.08.16-19.02.30","text":"<ul> <li>Fix <code>clojure-lsp --version</code></li> </ul>"},{"location":"CHANGELOG/#20210816-144754","title":"2021.08.16-14.47.54","text":"<ul> <li>General</li> <li>Fix wrong parse of source-paths for bb.edn when :paths contains symbols not only strings. #507</li> <li> <p>Bump clj-kondo to fix a issue with clojure-lsp running in a lein process.</p> </li> <li> <p>Editor</p> </li> <li>Fix find-definition in jars for cljc files where the var is available on both cljs and clj files. #509</li> <li>Add clojure.core.async common vars to common-refers to be required via code action.</li> <li>Remove diagnostics when files are deleted, properly cleaning server. #513</li> <li>Don't add ns form to blank edn files. #515</li> <li>Fix initializationOptions parsing for some clients. #516</li> <li>Fix refactor 'add missing refer' when there is already that namespace with a alias but no refers.</li> <li> <p>Improve <code>:notify-references-on-file-change</code> performance and use-cases, still disabled by default for some time.</p> </li> <li> <p>API</p> </li> <li>Rollback printing only via CLI to work with API as well. (can be disabled via :raw? option)</li> <li>Support for release of lein-clojure-lsp</li> </ul>"},{"location":"CHANGELOG/#20210805-193609","title":"2021.08.05-19.36.09","text":"<ul> <li>Bump clj-kondo to fix window path issues with analysis.</li> <li>Fix issue with references code lens for vim.</li> </ul>"},{"location":"CHANGELOG/#20210805-182554","title":"2021.08.05-18.25.54","text":"<ul> <li>Fix async project lint after startup for huge projects. #506</li> <li>Fix <code>:lint-project-files-after-startup?</code> to be considered before clojure-lsp lint unusued public vars.</li> <li>Fix excluded symbols for code lens, making clojure-lsp check clj-kondo config as well for the <code>:clojure-lsp/unused-public-var</code> excludes</li> </ul>"},{"location":"CHANGELOG/#20210803-133303","title":"2021.08.03-13.33.03","text":"<ul> <li>General</li> <li>Parse correctly unescaped URIs sent from clients like vim avoiding errors on some features.</li> <li>Bump clj-kondo fixing analysis position issue with <code>declare</code>, making rename and other features work.</li> <li>Don't use PowerShell profiles on Windows when analyzing classpath. Fixes https://github.com/BetterThanTomorrow/calva/issues/1050</li> <li> <p>Support babashka classpath and source-paths discovery via bb.edn file. (needs babashka &gt;= 0.5.1)</p> </li> <li> <p>Editor</p> </li> <li>Add <code>:hover :hide-file-location?</code> settings option to disable displaying the source path on hover.</li> <li>Use new clj-kondo <code>:custom-lint-fn</code> for the <code>:unused-public-var</code>, this should improve performance and give the ability to suppress unused vars via code with <code>#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}</code> or <code>#_:clj-kondo/ignore</code></li> </ul>"},{"location":"CHANGELOG/#20210728-142406","title":"2021.07.28-14.24.06","text":"<ul> <li>General</li> <li>Minor fix on the analysis queries comparison.</li> <li>Improve GraalVM configuration to use direct/less configurations.</li> <li> <p>Bump clj-kondo 2021.06.18 -&gt; 2021.07.28 which adds support for macroexpanding.</p> </li> <li> <p>Editor</p> </li> <li>Fix outgoing/incoming call hierarchy when vars are outside project/external jars.</li> <li> <p>Fix completion of aliases without var names typed yet, for example: <code>string/</code></p> </li> <li> <p>API/CLI</p> </li> <li>Fix filename in diffs with dry option.</li> <li>Add coloring to diffs following git diff.</li> <li>Add <code>ns-exclude-regex</code> for commands that check whole project, allowing to exclude certain namespaces via regex.</li> </ul>"},{"location":"CHANGELOG/#20210719-144652","title":"2021.07.19-14.46.52","text":"<ul> <li>General</li> <li><code>clean-ns</code> now sorts ns children forms according to the ClojureStyleGuide, at the moment moving require form before import form, enabled by default under flag <code>:clean :sort :ns</code> setting.</li> <li>Improve startup error handler and logging during project analysis. Related to #484</li> <li>Performance improvements using transducers on analysis queries.</li> <li> <p>Fixed auto-resolve source-paths for lein projects that get source-paths dynamically, clojure-lsp will use the default source-paths for these cases</p> </li> <li> <p>Editor</p> </li> <li>Improve hover output, both markdown and plain text forms.</li> <li>Allow calling thread-first/last and thread-first-all/last-all from within the list.</li> <li> <p>Improve resolve-macro-as messages and default excluded symbols.</p> </li> <li> <p>API/CLI</p> </li> <li>Fix empty <code>XDG_CONFIG_HOME</code> not defaulting to <code>$HOME/.config</code> #474</li> <li>Improve verbose logging setting.</li> </ul>"},{"location":"CHANGELOG/#20210712-123059","title":"2021.07.12-12.30.59","text":"<ul> <li>Editor</li> <li>Make semantic-tokens return no token for unknown symbols which has <code>:clj-kondo/unknown-namespace</code> on its analysis.</li> <li>Fix file uri location when hovering a symbol.</li> <li>Add reference code lens to keyword definitions, e.g. <code>re-frame.core/reg-sub</code>.</li> <li> <p>Add <code>semantic-tokens</code> debug information to <code>cursor-info</code> response.</p> </li> <li> <p>API/CLI</p> </li> <li>Fix when ns form does not match filename. #466</li> <li>Fix errors with project-root on graalvm binary</li> <li>Improve API usage avoiding exceptions and returning just data instead.</li> <li>Improve analysis cache to multiple API calls.</li> <li>Add new <code>--raw</code> option allowing to display only raw data. Useful to integrate with other tools like reviewdog.</li> </ul>"},{"location":"CHANGELOG/#20210705-203112","title":"2021.07.05-20.31.12","text":"<ul> <li>API/CLI</li> <li>Add <code>--verbose</code> option for debugging purposes.</li> <li>Fix usage as library parsing <code>:exec-args</code> correctly</li> </ul>"},{"location":"CHANGELOG/#20210705-151214","title":"2021.07.05-15.12.14","text":"<ul> <li>General</li> <li>Add <code>:clean :sort</code> settings option to disable sorting during <code>clean-ns</code>.</li> <li>Add <code>:keep</code> value to <code>:ns-indent-blocks-indentation</code> setting to don't change indentation during <code>clean-ns</code>.</li> <li>Deprecate <code>install-latest-clojure-lsp.sh</code> in place of <code>install</code> new script.</li> <li> <p>Improve source paths discoverability for <code>leiningen</code> projects following the same rules as <code>deps.edn</code> projects. For more information, check the settings section.</p> </li> <li> <p>API/CLI</p> </li> <li>Add <code>--dry</code> option to commands, useful to print only diffs instead of making changes.</li> <li>Check the new setup-clojure-lsp Github Action to run clojure-lsp on CI.</li> <li>Add <code>format</code> feature using cljfmt.</li> <li>Now, every release is available in clojars as <code>com.github.clojure-lsp/clojure-lsp</code>.</li> </ul>"},{"location":"CHANGELOG/#20210701-194902","title":"2021.07.01-19.49.02","text":"<ul> <li>Fix --project-path option for API.</li> <li>Add --log-path option to API.</li> </ul>"},{"location":"CHANGELOG/#20210701-134618","title":"2021.07.01-13.46.18","text":"<ul> <li>Fix find-references and references lens for <code>defrecord</code>.</li> <li>Improve <code>clean-ns</code> refactoring following the Clojure style guide.</li> <li>Fix <code>clean-ns</code> corner case issue where it would replace the <code>:as</code> value with the <code>:refer</code> value.</li> <li>Deprecate <code>:keep-require-at-start?</code> in favor of <code>:clean :ns-inner-blocks-indentation</code> with default value of <code>:next-line</code>.</li> <li>Bump <code>org.xerial/sqlite-jdbc</code> from 3.34.0 to 3.36.0.</li> <li>Avoid adding duplicated namespace for new blank files.</li> <li>Add API / CLI support, form more information check the API section.</li> </ul>"},{"location":"CHANGELOG/#20210624-142411","title":"2021.06.24-14.24.11","text":"<ul> <li>Fix missing LSP 3.16 graalvm reflection configs. #452</li> </ul>"},{"location":"CHANGELOG/#20210624-012001","title":"2021.06.24-01.20.01","text":"<ul> <li>Fix graalvm reflect config for LSP 3.16 protocol. #449</li> <li>Use last definition when showing signature help. #446</li> <li>Create 2 new LSP custom methods: <code>clojure/serverInfo/raw</code> and <code>clojure/serverInfo/log</code> deprecating old commands <code>server-info</code> and <code>cursor-info</code>, check the documentation for more information.</li> <li>Add <code>:final-settings</code> to <code>serverInfo</code> methods. #450</li> </ul>"},{"location":"CHANGELOG/#20210621-143054","title":"2021.06.21-14.30.54","text":"<ul> <li>Avoid removing whole require if unused refer but with used alias during clean-ns. #447</li> <li>Bump cljfmt 0.7.0 -&gt; 0.8.0. Fixes #266</li> <li>Bump clj-kondo 2021.06.01 -&gt; 2021.06.18</li> </ul>"},{"location":"CHANGELOG/#20210614-170047","title":"2021.06.14-17.00.47","text":"<ul> <li>Improve source paths discoverability for <code>deps.edn</code> projects. Adds <code>:source-aliases</code> for customization. For more information, check the settings section.</li> </ul>"},{"location":"CHANGELOG/#20210601-161944","title":"2021.06.01-16.19.44","text":"<ul> <li>Fix graalvm issue on completionItem InsertTextMode</li> <li>Bump clj-kondo and rewrite-clj to latest releases.</li> </ul>"},{"location":"CHANGELOG/#20210527-174234","title":"2021.05.27-17.42.34","text":"<ul> <li>Fix corner case error with project paths with spaces or other special characters. #437</li> <li>Drastically improve didOpen performance, improving kondo findings parsing and making linting async avoiding blocking some editors. #435</li> <li>Fix <code>:auto-add-ns-to-new-files?</code> flag always being considered as <code>true</code>. #436</li> </ul>"},{"location":"CHANGELOG/#20210522-165045","title":"2021.05.22-16.50.45","text":"<ul> <li>Fix completion item kind of clojure core items. Fixes #426</li> <li>Fix graalvm reflect config for SublimeText - #430</li> <li>Improve code lens for segregated code lens when on test files.</li> </ul>"},{"location":"CHANGELOG/#20210514-152602","title":"2021.05.14-15.26.02","text":"<ul> <li>Include non full qualified vars on unused-public-var exclude filter.</li> <li>Improve hover documentation: use correct markdown for docstrings; remove unnecessary new lines; add link to filename location.</li> <li>Rollback full text changes on last release and change approach for a temporary fix. #424</li> </ul>"},{"location":"CHANGELOG/#20210506-194400","title":"2021.05.06-19.44.00","text":"<ul> <li>Quick fix full text changes to handle it sync for semantic tokens</li> <li>Segregate main references from test references with option to disable via <code>lens-segregate-test-references</code></li> </ul>"},{"location":"CHANGELOG/#20210427-201745","title":"2021.04.27-20.17.45","text":"<ul> <li>Significantly improve the performance of workspace symbol filtering/searching. See relevant commit.</li> <li>Always sort refers when clean-ns.</li> <li>Add support for installing with homebrew on Linux.</li> <li>Bump clj-kondo to <code>2021.04.24-20210426.144134-2</code> adding support for finding re-frame by keyword. Fixes #411</li> <li>Fix find definition going to <code>declare</code> - Fixes #340</li> <li>Remove common already known clojure macros from <code>Resolve macro as</code> code action.</li> </ul>"},{"location":"CHANGELOG/#20210423-154947","title":"2021.04.23-15.49.47","text":"<ul> <li>Improve resolve-macro-as command to check and log if couldn't resolve the macro.</li> <li>Improve workspace symbol filtering/searching. Now, the sole candidates shown are guaranteed to include all the characters contained in the filter/search string.</li> <li>Add more tokens to semantic tokens: keywords, functions/var usages, java classes, local variables.</li> <li>Bump Graalvm from 21.0.0 to 21.1.0</li> <li>Bump clj-kondo to 2021.04.23 fixing some keywords corner cases.</li> </ul>"},{"location":"CHANGELOG/#20210413-124733","title":"2021.04.13-12.47.33","text":"<ul> <li>Add common snippets on completion. Check all available snippets here.</li> <li>Add support for custom snippets via <code>:additional-snippets</code>. Check here for more information. - Fixes #403</li> <li>Bump lsp4j from 0.11.0 -&gt; 0.12.0</li> </ul>"},{"location":"CHANGELOG/#20210407-163410","title":"2021.04.07-16.34.10","text":"<ul> <li>Fix renaming keywords in cljc files producing duplicate edits.</li> <li>After project startup, publish all project only diagnostics. This is a approach done by other LSPs to make work features like Project errors. Feature flag via <code>lint-project-files-after-startup?</code> with default <code>true</code>.</li> <li>Add experimental support for aarch64 linux native binary</li> <li>Fix formatting issues with a regression introduced on a previous release. - Fixes #339 and #396</li> </ul>"},{"location":"CHANGELOG/#20210403-184355","title":"2021.04.03-18.43.55","text":"<ul> <li>Fix textDocument/workspaceSymbols filter not working on native binaries.</li> <li>Report duplicate linters as default, can be disabled via <code>:linters :clj-kondo :report-duplicates</code> - Fixes #390</li> <li>Bump rewrite-clj to 1.0.605-alpha to fix exceptions when on clojure files with babashka interpreter on first line.</li> <li>Bump clj-kondo 2021.04.01-20210402.215253-6 to fix bug https://github.com/clj-kondo/clj-kondo/issues/1246</li> </ul>"},{"location":"CHANGELOG/#20210330-204234","title":"2021.03.30-20.42.34","text":"<ul> <li>Bump clj-londo 2021.03.22-20210327.192113-4 - Fixes #385</li> <li>Add support for outgoing call hierarchy - Fixes #384</li> <li>Improve and fix missing completion item kinds.</li> </ul>"},{"location":"CHANGELOG/#20210326-234107","title":"2021.03.26-23.41.07","text":"<ul> <li>Bump clj-kondo 2021.03.22-20210324.110254-3 - Fixes #382</li> <li>[graalvm] Fixes Unable to invoke no-args constructor for class org.eclipse.lsp4j.ShowDocumentCapabilities error.</li> <li>Fix/enhance keyword rename - #383</li> </ul>"},{"location":"CHANGELOG/#20210324-004155","title":"2021.03.24-00.41.55","text":"<ul> <li>Migrate from lein to deps.edn</li> <li>Bump clj-kondo to 2021.03.22</li> <li>Fix clean-ns sorting according to symbols not brackets - Fixes #380</li> <li>Fix missing graalvm reflect config for CompletionItemTextEdit - Fixes #381</li> </ul>"},{"location":"CHANGELOG/#20210321-232919","title":"2021.03.21-23.29.19","text":"<ul> <li>Add code action 'resolve macro as', it requires client to fill the chosen macro and clj-kondo config file.</li> <li>Bump rewrite-clj to 1.0.594-alpha</li> <li>Bump data.json to 2.0.1</li> <li>Bump lsp4j to 0.11.0</li> </ul>"},{"location":"CHANGELOG/#20210318-192341","title":"2021.03.18-19.23.41","text":"<ul> <li>Add support for diagnostic tags: deprecated and unnecessary.</li> <li>Fix wrong textDocument/documentHighlight for function local-usages.</li> <li>Use new clj-kondo <code>copy-configs</code> flag to copy hooks during lint.</li> <li>Bunp clj-kondo to fix unused public linter check for <code>:exclude-when-defined-by</code></li> </ul>"},{"location":"CHANGELOG/#20210316-202806","title":"2021.03.16-20.28.06","text":"<ul> <li>Fix server not analyzing after a wrong code on cljs files - #367</li> <li>Rollback incremental didChange adding a new <code>:text-document-sync-kind</code> setting with <code>:full</code> as default.</li> </ul>"},{"location":"CHANGELOG/#20210314-232246","title":"2021.03.14-23.22.46","text":"<ul> <li>Fix completion inside refers, re-add support for it - Fixes #364</li> <li>Change range of expression functions clj-kondo diagnostics to avoid collision with function signature.</li> </ul>"},{"location":"CHANGELOG/#20210306-170535","title":"2021.03.06-17.05.35","text":"<ul> <li>Fix incremental didChange, debouncing distincting by uri, fixing some inconsistent file changes when multiple files are changed at same time (rename, iedit, etc).</li> <li>Make unused-public-var ignore -main public functions.</li> <li>Add <code>:exclude-when-defined-by</code> option to <code>unused-public-var</code> linter, check settings documentation for more information.</li> </ul>"},{"location":"CHANGELOG/#20210305-133547","title":"2021.03.05-13.35.47","text":"<ul> <li>Fix clojure-lsp lint crash when analyzing specific macros with clj-kondo hooks.</li> <li>Fix didChange for Nvim client.</li> <li>Add new clojure-lsp linter: unused-public-var - Fixes #359</li> <li>Add option to disable clj-kondo linter, check settings documentation for more details.</li> </ul>"},{"location":"CHANGELOG/#20210301-191854","title":"2021.03.01-19.18.54","text":"<ul> <li>Bump clj-kondo fixing issues on require form not being analyzed.</li> <li>Fix textDocument/workspaceSymbols to use the query sent by client.</li> </ul>"},{"location":"CHANGELOG/#20210227-233555","title":"2021.02.27-23.35.55","text":"<ul> <li>Add support to complete full qualified namespaces - Fixes #337</li> <li>Add <code>:log-path</code> setting to log to a custom file.</li> <li>Avoid exception on code actions when on cljc reader macros - Related to #346</li> </ul>"},{"location":"CHANGELOG/#20210226-135848","title":"2021.02.26-13.58.48","text":"<ul> <li>Improve clojure-lsp config search checking always home dir considering XDG_CONFIG_HOME and project root up to system root (/) - Fixes #339.</li> <li>Handle incremental text changes on <code>textDocument/didChange</code> notifications following LSP protocol, improving performance for huge files.</li> <li>Add clj-kondo version to --version and server-info.</li> <li>Add new create private function code action.</li> </ul>"},{"location":"CHANGELOG/#20210224-142308","title":"2021.02.24-14.23.08","text":"<ul> <li>Improve completion performance resolving the item only when documentation is requested</li> <li>Add new thread first/last all code actions</li> </ul>"},{"location":"CHANGELOG/#20210221-210251","title":"2021.02.21-21.02.51","text":"<ul> <li>Implement support for textDocument/signatureHelp - Fixes #324</li> <li>Disable notify-references on didChange with a flag <code>notify-references-on-change</code>.</li> <li>Fix completion not working when reader macro on file - Fixes #332</li> </ul>"},{"location":"CHANGELOG/#20210219-230840","title":"2021.02.19-23.08.40","text":"<ul> <li>Fix duplicated symbols for cljc files on textDocument/documentSymbols - Fixes #328</li> <li>Add namespace require when completing a unimported namespace - Fixes #309</li> <li>Fix completion not working for cljc files</li> </ul>"},{"location":"CHANGELOG/#20210219-001927","title":"2021.02.19-00.19.27","text":"<ul> <li>Fix completion of invalid clojure core (e.g. <code>foo/</code>) - Fixes #270</li> </ul>"},{"location":"CHANGELOG/#20210217-170045","title":"2021.02.17-17.00.45","text":"<ul> <li>Allow find all references across the project of simple keywords</li> <li>Allow specify custom sqlite.db location with <code>sqlite-db-path</code>, default to <code>&lt;project&gt;/.lsp/sqlite.db</code></li> </ul>"},{"location":"CHANGELOG/#20210214-194647","title":"2021.02.14-19.46.47","text":"<ul> <li>Removing false positive logs from invalid analysis from clj-kondo macro expand analysis</li> <li>Fix call hierarchy when the reference was not open yet in the editor.</li> <li>Smart re-analyze variable/function references when arguments of the definition were updated.</li> <li>Rollback Macos native image compress until it works for MacOS Big Sur - #322</li> </ul>"},{"location":"CHANGELOG/#20210213-180419","title":"2021.02.13-18.04.19","text":"<ul> <li>Bump clj-kondo to fix false-positive unresolved-vars</li> <li>Prioritize project analysis on all analysis during find definition - Fixes #318</li> <li>Compress native binaries with UPX decreasing binary size.</li> </ul>"},{"location":"CHANGELOG/#20210212-031312","title":"2021.02.12-03.13.12","text":"<ul> <li>Fix completion issues with graalvm native linux binaries when completing local variables.</li> <li>Fix completion exception when completing numbers - Fixes #310</li> <li>Completion inside a require suggests all available namespaces</li> <li>Change log pattern to <code>/tmp/clojure-lsp.&lt;TIMESTAMP&gt;.out</code> use default temp file. Should fix issues with permissions on tmp folder.</li> </ul>"},{"location":"CHANGELOG/#20210211-124306","title":"2021.02.11-12.43.06","text":"<ul> <li>Fix auto add ns not working for projects.</li> <li>New code action: Move to let</li> <li>New code action: Change coll to map, list, set or vector</li> </ul>"},{"location":"CHANGELOG/#20210210-030119","title":"2021.02.10-03.01.19","text":"<ul> <li>Fix config passed to clj-kondo during analysis - Fixes #308</li> </ul>"},{"location":"CHANGELOG/#20210209-182806","title":"2021.02.09-18.28.06","text":"<ul> <li>Fix auto add ns to check project root and source paths</li> <li>Add alias on copmletion items - Fix completion items for Calva client</li> </ul>"},{"location":"CHANGELOG/#20210207-225126","title":"2021.02.07-22.51.26","text":"<ul> <li>Fix install-latest-clojure-lsp.sh script - #304</li> <li>Fix clojure-lsp re-analysing classpath when project contains a keyword starting with a number - #305</li> <li>Allow clj-kondo to pick up config correctly in mono repos - #303</li> </ul>"},{"location":"CHANGELOG/#20210207-030431","title":"2021.02.07-03.04.31","text":"<ul> <li>Make release's native binaries executable by default - #299</li> <li>Improve completion removing the necessity to call completion/resolveItem - #292</li> <li>New code action: Add suggested alias to namespaces - #302</li> </ul>"},{"location":"CHANGELOG/#20210205-030534","title":"2021.02.05-03.05.34","text":"<ul> <li>Add support for keyword analysis (definition, references, completion, rename, hover)</li> <li>Reduce jar and binaries size excluding some dependencies (Need to fix a lein issue yet)</li> </ul>"},{"location":"CHANGELOG/#20210204-020858","title":"2021.02.04-02.08.58","text":"<ul> <li>Fix --version on graalvm native compiled binaries</li> </ul>"},{"location":"CHANGELOG/#20210204-010921","title":"2021.02.04-01.09.21","text":"<ul> <li>Add integration tests to release process</li> </ul>"},{"location":"CHANGELOG/#20210202-140223","title":"2021.02.02-14.02.23","text":"<ul> <li>Fix <code>clojure-lsp</code> embedded jar binary during release CI</li> <li>Fix duplicate references on cljc files</li> </ul>"},{"location":"CHANGELOG/#20210202-030646","title":"2021.02.02-03.06.46","text":"<ul> <li>Add clojure.java.io to known requires - #291</li> <li>Add manual System/gc after first classpath scan, it should decrease memory after the first startup</li> <li>Add support for Windows GraalVM compiled native binary</li> </ul>"},{"location":"CHANGELOG/#20210201-203752","title":"2021.02.01-20.37.52","text":"<ul> <li>Add native binaries for Linux and MacOS compiled with GraalVM #267 (Experimental)</li> </ul>"},{"location":"CHANGELOG/#20210128-030316","title":"2021.01.28-03.03.16","text":"<ul> <li>Fix clj-kondo batch analysis when merging batchs - Fix #284</li> </ul>"},{"location":"CHANGELOG/#20210127-214742","title":"2021.01.27-21.47.42","text":"<ul> <li>Fix missing printlng and avoid errors for next time (this was causing issues in clients like vim coc)</li> </ul>"},{"location":"CHANGELOG/#20210126-223527","title":"2021.01.26-22.35.27","text":"<ul> <li>Fix document-symbol after #261 - Fixes #276</li> <li>Reduce memory usage on startup batch analyzing classpath via clj-kondo. - Fixes #268</li> </ul>"},{"location":"CHANGELOG/#20210125-225605","title":"2021.01.25-22.56.05","text":"<ul> <li>Do not remove document on <code>textDocument/didClose</code>, related to #264.</li> <li>Fix default project-specs for shadow-cljs to use npx prefix.</li> <li>Fix range of <code>textDocument/hover</code> for definition usages.</li> <li>Fix <code>completionItem/resolve</code> broken after #261.</li> </ul>"},{"location":"CHANGELOG/#20210125-172205","title":"2021.01.25-17.22.05","text":"<ul> <li>Remove references code-lens from <code>deftest</code> forms</li> <li>Fix completion for alias ns from external deps - Fixes #269</li> </ul>"},{"location":"CHANGELOG/#20210122-130428","title":"2021.01.22-13.04.28","text":"<p>Huge refactor https://github.com/clojure-lsp/clojure-lsp/pull/261 which uses clj-kondo <code>analysis</code>/ <code>findings</code> output to almost all <code>clojure-lsp</code> features.</p> <ul> <li>Should significantly increase performance and startup time</li> <li>Should fix almost all bugs/issues with windows Users since we now rely on clj-kondo analysis</li> <li>Remove all lint configs from <code>clojure-lsp</code> including <code>macro-defs</code>, they should be configured on <code>clj-kondo</code> side now via <code>.clj-kondo/config.edn</code></li> <li>Move file path on documentation to bottom</li> </ul>"},{"location":"CHANGELOG/#20210120-013932","title":"2021.01.20-01.39.32","text":"<ul> <li>Fixes args for extract-function refactoring - Fixes #263</li> </ul>"},{"location":"CHANGELOG/#20210116-032820","title":"2021.01.16-03.28.20","text":"<ul> <li>Check for defintions when finding references with includeDeclaration as true - Fixes #260</li> <li>Add custom command cursor-info to debugging clojure-lsp.</li> <li>Fix unnecessary new-lines on imports when executing clean-ns</li> </ul>"},{"location":"CHANGELOG/#20210114-231554","title":"2021.01.14-23.15.54","text":"<ul> <li>Check for the whole line to add-miising-* code actions instead of expect the cursor at the ns to be required/imported - Fixes #258</li> <li>Return all possible add-missing-* code actions to the same line.</li> </ul>"},{"location":"CHANGELOG/#20210114-171910","title":"2021.01.14-17.19.10","text":"<ul> <li>Fix add missing import code actions after refactor</li> </ul>"},{"location":"CHANGELOG/#20210114-124442","title":"2021.01.14-12.44.42","text":"<ul> <li>Fixes #208</li> </ul>"},{"location":"CHANGELOG/#20210114-023028","title":"2021.01.14-02.30.28","text":"<ul> <li>LSP 3.16: Add support for <code>codeAction/resolve</code> improving performance if client supports it</li> <li>Bump extend lib</li> <li>[CI] Remove auto release, next releases should contain more than one PR/fix</li> </ul>"},{"location":"building/","title":"Building","text":""},{"location":"building/#graalvm","title":"GraalVM","text":"<p>Every release, the native binaries (Windows, Linux and MacOS) are compiled with GraalVM and uploaded to Github releases page.</p> <p>To build a native image with GraalVM:</p> <ul> <li>Install the GraalVM 21 and set the <code>GRAALVM_HOME</code> to the installation dir. </li> <li>Install <code>native-image</code> with <code>$GRAALVM_HOME/bin/gu install native-image</code>. </li> <li>Run from <code>clojure-lsp</code> project root <code>bb native-cli</code>.</li> </ul> <p>The build may take some minutes and the result will be a <code>./clojure-lsp</code> native binary.</p>"},{"location":"building/#debug-development","title":"Debug / development","text":"<ul> <li>Run <code>bb debug-cli</code>.</li> </ul>"},{"location":"building/#jar","title":"Jar","text":""},{"location":"building/#editorcli","title":"Editor/CLI","text":"<p>Run <code>bb cli-prod-jar</code> for building the jar to be used with LSP protocol in a editor or CLI via <code>bb prod-cli</code>.</p>"},{"location":"building/#jvm-api","title":"JVM API","text":"<p>Run <code>bb lib-jar</code> for building the jar to be used on JVM via API.</p>"},{"location":"capabilities/","title":"Capabilities","text":""},{"location":"capabilities/#implementation-status","title":"Implementation Status","text":"<p>Below are all the currently supported LSP capabilities and their implementation status:</p> capability done notes initialize \u221a initialized \u221a shutdown \u221a exit \u221a $/cancelRequest \u221a $/progress \u221a window/showDocument \u221a window/showMessage \u221a window/showMessageRequest \u221a window/logMessage window/workDoneProgress/create window/workDoneProgress/cancel telemetry/event client/registerCapability \u221a client/unregisterCapability workspace/workspaceFolders workspace/didChangeWorkspaceFolders workspace/didChangeConfiguration \u221a Currently does nothing but log workspace/configuration We use a more robust settings concept (.lsp/config.edn) workspace/didChangeWatchedFiles \u221a workspace/symbol \u221a workspace/executeCommand \u221a See Extra capabilities workspace/applyEdit \u221a TextDocumentEdit and RenameFile only workspace/willRenameFiles \u221a workspace/didRenameFiles \u221a workspace/willCreateFiles workspace/didCreateFiles workspace/willDeleteFiles workspace/didDeleteFiles textDocument/didOpen \u221a textDocument/didChange \u221a textDocument/willSave textDocument/willSaveWaitUntil textDocument/didSave \u221a Do nothing currently textDocument/didClose \u221a textDocument/publishDiagnostics \u221a textDocument/completion \u221a completionItem/resolve \u221a textDocument/hover \u221a textDocument/signatureHelp \u221a Missing support for active parameter ATM textDocument/declaration \u221a Show where the symbol was declared on the file, like alias/refer  definitions textDocument/definition \u221a textDocument/typeDefinition textDocument/implementation \u221a Implementation of defprotocols/defmulti showing deftypes and defrecords textDocument/references \u221a textDocument/documentHighlight \u221a textDocument/documentSymbol \u221a textDocument/codeAction \u221a codeAction/resolve \u221a textDocument/codeLens \u221a codeLens/resolve \u221a textDocument/documentLink documentLink/resolve textDocument/documentColor textDocument/colorPresentation textDocument/formatting \u221a textDocument/rangeFormatting \u221a textDocument/onTypeFormatting textDocument/rename \u221a textDocument/prepareRename \u221a textDocument/foldingRange \u221a textDocument/selectionRange \u221a textDocument/semanticTokens/full \u221a textDocument/semanticTokens/full/delta textDocument/semanticTokens/range \u221a workspace/semanticTokens/refresh workspace/codeLens/refresh \u221a textDocument/linkedEditingRange \u221a textDocument/prepareCallHierarchy \u221a callHierarchy/incomingCalls \u221a callHierarchy/outgoingCalls \u221a textDocument/moniker"},{"location":"capabilities/#extra-capabilities","title":"Extra capabilities","text":"<p>Besides LSP official capabilities, <code>clojure-lsp</code> has some extra features:</p>"},{"location":"capabilities/#refactorings","title":"Refactorings","text":"<p>It should be possible to introduce most of the refactorings here</p>"},{"location":"capabilities/#more-details","title":"More details","text":"<p>Calling <code>executeCommand</code> with the following commands and additional args will notify the client with <code>applyEdit</code>. All commands expect the first three args to be <code>[document-uri, line, character]</code> (eg <code>[\"file:///home/snoe/file.clj\", 13, 11]</code>)</p> done command args notes \u221a add-missing-import <code>[document-uri, line, character, import-name]</code> \u221a add-missing-libspec \u221a clean-ns \u221a cycle-coll \u221a cycle-privacy \u221a expand-let \u221a extract-function <code>[document-uri, line, character, function-name]</code> \u221a inline-symbol \u221a introduce-let <code>[document-uri, line, character, binding-name]</code> \u221a move-to-let <code>[document-uri, line, character, binding-name]</code> \u221a thread-first \u221a thread-first-all \u221a thread-last \u221a thread-last-all \u221a unwind-all \u221a unwind-thread \u221a resolve-macro-as <code>[document-uri, line, character, resolved-full-symbol kondo-config-path]</code> \u221a create-test <p>See Vim client section for an example.</p> <p>Emacs provides all those refactorings via lsp-mode  with the <code>lsp-clojure-</code> prefix.</p> <p>Other clients might provide a higher level interface to <code>workspace/executeCommand</code> you need to pass the path, line and character numbers.</p>"},{"location":"capabilities/#custom-methods","title":"Custom methods","text":"<p><code>clojure-lsp</code> has some custom LSP methods that doesn't follow the protocol but aggregate value as a clojure IDE:</p>"},{"location":"capabilities/#test-tree","title":"Test tree","text":"<p>Notify client with test tree data to build a UI tree on client side.</p> <p>Type: Server Notification</p> <p>Capability: <code>experimental.testTree</code></p> <p>Method: <code>clojure/textDocument/testTree</code></p> <p>Response: <code>TestTreeParams</code></p> <ul> <li> <p><code>TestTreeParams</code>: <code>{:uri string, :tree TestTreeNode}</code></p> </li> <li> <p><code>TestTreeNode</code>: <code>{:name string, name-range: Range, range: Range, :kind TestTreeKind, :children [TestTreeNode]}</code></p> </li> <li> <p><code>TestTreeKind</code>: <code>:namespace 1 | :deftest 2 | :testing 3</code></p> </li> </ul>"},{"location":"capabilities/#project-tree","title":"Project tree","text":"<p>Request the project tree showing project source-paths and external dependencies. If params is null request the project root nodes, otherwise request the nodes of the passed node. The project tree is lazy, so client should request the nodes of a node when user expand it manually.</p> <p>Type: Client request with response</p> <p>Capability: <code>experimental.projectTree</code></p> <p>Method: <code>clojure/workspace/projectTree/nodes</code></p> <p>Params: <code>ProjectTreeNodeLeaf</code> | <code>null</code></p> <p>Response: <code>ProjectTreeNodeBranch</code></p> <ul> <li> <p><code>ProjectTreeNode</code>: <code>ProjectTreeNodeBranch | ProjectTreeNodeLeaf</code></p> </li> <li> <p><code>ProjectTreeNodeBranch</code>: <code>{:name string, :type ProjectTreeNodeType, :uri string?, :detail string?, :id string?, :nodes [ProjectTreeNode]}</code></p> </li> <li> <p><code>ProjectTreeNodeLeaf</code>: <code>{:name string, :type ProjectTreeNodeType, :id string?, :uri string?, :range Range?, :detail string?, final boolean}</code></p> </li> <li> <p><code>ProjectTreeNodeType</code>: <code>:project 1 | :source-path 2 | :library 3 | :jar 4 | :ns 5 | :class 6 | :function 7 | :variable 8 | :interface 9</code></p> </li> </ul>"},{"location":"capabilities/#server-info-raw","title":"Server Info Raw","text":"<p>Use to retrieve from server the server configuration information.</p> <p>Type: Client request with response</p> <p>Capability: none </p> <p>Method: <code>clojure/serverInfo/raw</code></p> <p>Params: none </p> <p>Response: Any</p>"},{"location":"capabilities/#server-info-log","title":"Server Info Log","text":"<p>Use to log to client the server configuration information.</p> <p>Type: Client request with response</p> <p>Capability: none </p> <p>Method: <code>clojure/serverInfo/log</code></p> <p>Params: none </p> <p>Response: none</p>"},{"location":"capabilities/#cursor-info-log","title":"Cursor Info Log","text":"<p>Use to log to client the debugging information for the symbol at cursor.</p> <p>Type: Client request with response</p> <p>Capability: none </p> <p>Method: <code>clojure/cursorInfo/log</code></p> <p>Params: <code>[uri, line, character]</code> </p> <p>Response: Any</p>"},{"location":"capabilities/#clojuredocs-raw","title":"Clojuredocs raw","text":"<p>Use to retrieve any Clojuredocs entry. Will return <code>null</code> if no entry found.</p> <p>Type: Client request with response</p> <p>Capability: none </p> <p>Method: <code>clojure/clojuredocs/raw</code></p> <p>Params: <code>[symbol-name, symbol-ns]</code></p> <p>Response: Any</p>"},{"location":"clients/","title":"Clients (Editors)","text":"<p>Clients are either editors with built in LSP support like Oni or nvim, or an appropriate plugin. Clients are responsible for launching the server, the server is a subprocess of your editor not a daemon.</p> <p>In general, make sure to configure the client to use stdio and a server launch command like <code>['/usr/local/bin/clojure-lsp']</code>. If that fails, you may need to have your client launch inside a shell, so use something like <code>['bash', '-c', '/usr/local/bin/clojure-lsp']</code>. In windows you probably need to use the <code>clojure-lsp.bat</code>.</p> <p>TIP: If your editor is not started from the terminal then it is possible that its <code>$PATH</code> is quite different from the one in the shell and clojure-lsp will not be able to find the executables it needs, such as <code>clojure</code> and <code>npx</code>. To alleviate that, create a wrapper script that sets the <code>PATH</code> correctly. Make sure that nothing in the script uses stdin / stdout as these are used for communication with the editor and any extra input/output could mess it up. An example script (also remember to make it executable, e.g. <code>chmod u+x &lt;script&gt;</code>):</p> <pre><code>#!/bin/bash -l\nif [ ! -e npx ]; then\n  export PATH=$PATH:/Users/me/.nvm/versions/node/v10.24.1/bin\nfi\nexec /usr/local/bin/clojure-lsp\n</code></pre>"},{"location":"clients/#emacs","title":"Emacs","text":"<p>lsp-mode has built in support for <code>clojure-lsp</code>. With <code>use-package</code>, add the following to your emacs config:</p> <pre><code>(use-package lsp-mode\n  :ensure t\n  :hook ((clojure-mode . lsp)\n         (clojurec-mode . lsp)\n         (clojurescript-mode . lsp))\n  :config\n  ;; add paths to your local installation of project mgmt tools, like lein\n  (setenv \"PATH\" (concat\n                   \"/usr/local/bin\" path-separator\n                   (getenv \"PATH\")))\n  (dolist (m '(clojure-mode\n               clojurec-mode\n               clojurescript-mode\n               clojurex-mode))\n     (add-to-list 'lsp-language-id-configuration `(,m . \"clojure\")))\n  (setq lsp-clojure-server-command '(\"/path/to/clojure-lsp\"))) ;; Optional: In case `clojure-lsp` is not in your $PATH\n</code></pre> <p>Optionally you can add <code>lsp-ui</code> for UI feedback and <code>company-mode</code> for completion:</p> <pre><code>(use-package lsp-ui\n  :ensure t\n  :commands lsp-ui-mode)\n\n(use-package company\n  :ensure t)\n</code></pre> <p>In <code>lsp-mode</code>, <code>lsp-clojure-server-command</code> variable is available to override the command to start the <code>clojure-lsp</code> server, might be necessary to do this on a Windows environment.</p> <p>For a detailed guide on how to configure Emacs with LSP, check here</p> <p>For more <code>lsp-mode</code> clojure settings, check here</p>"},{"location":"clients/#visual-studio-code","title":"Visual Studio Code","text":"<p>Calva is a extension for VSCode for Clojure Development that includes clojure-lsp.</p>"},{"location":"clients/#vim","title":"Vim","text":"<p>I prefer https://github.com/neoclide/coc.nvim but both http://github.com/autozimu/LanguageClient-neovim and https://github.com/prabirshrestha/vim-lsp work well.</p> <p>See my nvim/init.vim and coc-settings.json</p> <p>Another example of a Neovim Conjure/CoC/clojure-lsp setup can be found on dharrigan's github repository.</p> <p>LanguageClient-neovim can be configure with:</p> <p>Refactorings: <pre><code>function! Expand(exp) abort\n    let l:result = expand(a:exp)\n    return l:result ==# '' ? '' : \"file://\" . l:result\nendfunction\n\nnnoremap &lt;silent&gt; crcc :call LanguageClient#workspace_executeCommand('cycle-coll', [Expand('%:p'), line('.') - 1, col('.') - 1])&lt;CR&gt;\nnnoremap &lt;silent&gt; crth :call LanguageClient#workspace_executeCommand('thread-first', [Expand('%:p'), line('.') - 1, col('.') - 1])&lt;CR&gt;\nnnoremap &lt;silent&gt; crtt :call LanguageClient#workspace_executeCommand('thread-last', [Expand('%:p'), line('.') - 1, col('.') - 1])&lt;CR&gt;\nnnoremap &lt;silent&gt; crtf :call LanguageClient#workspace_executeCommand('thread-first-all', [Expand('%:p'), line('.') - 1, col('.') - 1])&lt;CR&gt;\nnnoremap &lt;silent&gt; crtl :call LanguageClient#workspace_executeCommand('thread-last-all', [Expand('%:p'), line('.') - 1, col('.') - 1])&lt;CR&gt;\nnnoremap &lt;silent&gt; crml :call LanguageClient#workspace_executeCommand('move-to-let', [Expand('%:p'), line('.') - 1, col('.') - 1, input('Binding name: ')])&lt;CR&gt;\nnnoremap &lt;silent&gt; cril :call LanguageClient#workspace_executeCommand('introduce-let', [Expand('%:p'), line('.') - 1, col('.') - 1, input('Binding name: ')])&lt;CR&gt;\nnnoremap &lt;silent&gt; crel :call LanguageClient#workspace_executeCommand('expand-let', [Expand('%:p'), line('.') - 1, col('.') - 1])&lt;CR&gt;\nnnoremap &lt;silent&gt; cram :call LanguageClient#workspace_executeCommand('add-missing-libspec', [Expand('%:p'), line('.') - 1, col('.') - 1])&lt;CR&gt;\n</code></pre></p> <p><code>initializationOptions</code> can be sent by setting: <code>let g:LanguageClient_settingsPath=\".lsp/settings.json\"</code></p> <p>Project-local <code>.lsp/settings.json</code> would have content like: <pre><code>{\"initializationOptions\": {\n   \"source-paths\": [\"shared-src\", \"src\", \"test\", \"dashboard/src\"],\n   \"macro-defs\": {\"project.macros/dofor\": [\"bindings\", \"bound-elements\"]}}}\n</code></pre></p> <p>Further refactoring mappings include being able to invoke the <code>(coc-codeaction-*)</code> function to provide actions such as <code>move to let</code>, <code>change coll to map</code> and so on.</p> <pre><code>nmap &lt;silent&gt; &lt;Leader&gt;cr            &lt;Plug&gt;(coc-rename)\nnmap &lt;silent&gt; &lt;Leader&gt;cf            &lt;Plug&gt;(coc-references)\nxmap &lt;silent&gt; &lt;Leader&gt;c             &lt;Plug&gt;(coc-codeaction-selected)\nnmap &lt;silent&gt; &lt;Leader&gt;c             &lt;Plug&gt;(coc-codeaction-line)\nnmap &lt;silent&gt; gd                    &lt;Plug&gt;(coc-definition)\n</code></pre>"},{"location":"clients/#neovim","title":"Neovim","text":"<p>Neovim includes an LSP client and the nvim-lspconfig plugin provides default configuration for numerous LSP servers.</p> <p>Mason.nvim tool manger for Neovim can be used to install and manage updates for Clojure LSP server (and many other LSP &amp; DAP servers, linters and format tooling).</p> <p>Mason-lspconfig.nvim bridges mason with nvim-lspconfig to simplify configuration of Mason installed LSP tools.</p> <p>Actively maintained configurations which support Clojure development:</p> <ul> <li>Practicalli Astro5 is a Lua configuration on top of AstroNvim, supported by the Practicalli Neovim book.</li> <li>cajus-nfnl configuration includes documentation on how configure a Clojure IDE using fennel (nfnl), clojure-lsp and conjure.</li> </ul>"},{"location":"clients/#intellij","title":"Intellij","text":""},{"location":"clients/#clojure-lsp-intellij-recommended","title":"clojure-lsp-intellij (recommended)","text":"<p>The clojure-lsp-intellij is a free open source Intellij plugin that has clojure-lsp built-in and has exclusive support from clojure-lsp maintainers with features that other generic LSP plugins does not support.</p>"},{"location":"clients/#generic-lsp4intellij","title":"Generic lsp4intellij","text":"<p>Install the LSP Support plugin and configure it to launch clojure-lsp for Clojure/Script files:</p> <ol> <li>Go to Preferences / Languages &amp; Frameworks / Language Server Protocol / Server Definitions. Select Raw command.</li> <li>In the Extension field enter <code>clj;cljs;cljc;edn</code>.</li> <li>In the Command field enter the path to the executable, for instance <code>/usr/local/bin/clojure-lsp</code>.</li> </ol> <p>BEWARE: The LSP Support plugin has short timeouts and will kill clojure-lsp silently if it exceeds the limit. It is highly recommended that you increase the Init timeout from 10000 (10s) to e.g. 300000 (5 min). The first scan can easily take over a minute on a bigger project. See Preferences / Languages &amp; Frameworks / Language Server Protocol / Timeouts. If the plugin's icon in the status bar (a circle) turns red, it means starting clojure-lsp failed. Click on it and select Show timeouts - any limits that were exceeded will be in red.</p>"},{"location":"clients/#sublime-text","title":"Sublime Text","text":"<p>Clojure LSP can be installed by first installing the LSP plugin which brings Language Server Protocol support to Sublime Text editor and then following the set-up instructions here to download Clojure LSP and how to configure it in Sublime Text.</p>"},{"location":"clients/#oni","title":"Oni","text":"<p>Seems to work reasonably well but couldn't get rename to work reliably https://github.com/onivim/oni</p>"},{"location":"clients/#atom","title":"Atom","text":"<p>I tried making a client but my hello world attempt didn't seem to work. If someone wants to take this on, I'd be willing to package it here too.</p>"},{"location":"development/","title":"clojure-lsp Development","text":""},{"location":"development/#codebase-architecture","title":"Codebase architecture","text":"<p>The codebase is dense but well structured, the diagram below will help understand the layers making easier to understand where you need to make your changes.</p> <p></p> visualization above's code <pre><code>---\nconfig:\ntheme: dark\n---\nflowchart TB\nsubgraph Clients[\"Clients\"]\n       VSCode[\"VS Code&lt;br&gt;(Calva)\"]\n       Emacs[\"Emacs&lt;br&gt;(lsp-mode / eglot)\"]\n       Vim[\"Vim/Neovim\"]\n       IntelliJ[\"IntelliJ&lt;br&gt;(clojure-lsp-intellij)\"]\n       REPL[\"Repl\"]\n       OtherEditors[\"Other editors\"]\n end\nsubgraph subGraph1[\"Cli (cli/)\"]\n       CLIMain[\"Process&lt;br&gt;(main.clj)\"]\n       LSPServer[\"LSP Server&lt;br&gt;(server.clj)\"]\n end\nsubgraph subGraph2[\"Core Services\"]\n       Handlers[\"Features handlers&lt;br&gt;(handlers.clj)\"]\n       Startup[\"Startup &amp;amp; Init&lt;br&gt;(startup.clj)\"]\n       Config[\"Configuration&lt;br&gt;(config.clj)\"]\n       DB[\"Database&lt;br&gt;(db.clj)\"]\n end\nsubgraph subGraph3[\"Analysis Engine\"]\n       KondoIntegration[\"clj-kondo Integration&lt;br&gt;(kondo.clj)\"]\n       Parser[\"Parser&lt;br&gt;(parser.clj)\"]\n       Queries[\"Analysis Queries&lt;br&gt;(queries.clj)\"]\n       DepGraph[\"Dependency Graph&lt;br&gt;(dep_graph.clj)\"]\n end\nsubgraph subGraph4[\"Feature Implementations\"]\n       Completion[\"Completion&lt;br&gt;(completion.clj)\"]\n       Diagnostics[\"Diagnostics&lt;br&gt;(diagnostics.clj)\"]\n       CodeActions[\"Code Actions&lt;br&gt;(code_actions.clj)\"]\n       Rename[\"Rename&lt;br&gt;(rename.clj)\"]\n       Hover[\"Hover&lt;br&gt;(hover.clj)\"]\n       References[\"Find References\"]\n       Format[\"Formatting&lt;br&gt;(format.clj)\"]\n       Refactoring[\"Refactoring Features\"]\n end\nsubgraph subGraph5[\"Support Systems\"]\n       FileManagement[\"File Management&lt;br&gt;(file_management.clj)\"]\n       Classpath[\"Classpath Resolution&lt;br&gt;(classpath.clj)\"]\n       SourcePaths[\"Source Paths&lt;br&gt;(source_paths.clj)\"]\n       Logger[\"Logging&lt;br&gt;(logger.clj)\"]\n end\nsubgraph subGraph6[\"Core Library (lib/)\"]\n       API[\"Public API&lt;br&gt;(api.clj)\"]\n       InternalAPI[\"Internal API&lt;br&gt;(internal_api.clj)\"]\n       subGraph2\n       subGraph3\n       subGraph4\n       subGraph5\n end\nsubgraph subGraph7[\"External Tools\"]\n       CljKondo[\"clj-kondo&lt;br&gt;(Static Analysis)\"]\n       Cljfmt[\"cljfmt&lt;br&gt;(Code Formatting)\"]\n       CljDepend[\"clj-depend&lt;br&gt;(Dependency Analysis)\"]\n       ClojureDocs[\"ClojureDocs&lt;br&gt;(Documentation)\"]\n end\nsubgraph subGraph8[\"File System\"]\n       ProjectFiles[\"Project Source Files&lt;br&gt;(.clj, .cljs, .cljc)\"]\n       ConfigFiles[\"Config Files&lt;br&gt;(deps.edn, project.clj)\"]\n       Dependencies[\"Dependencies&lt;br&gt;(JARs, Git repos)\"]\n       CacheFiles[\"Cache Files&lt;br&gt;(.clj-kondo, .lsp)\"]\n end\n VSCode --&gt; CLIMain\n Emacs --&gt; CLIMain\n Vim --&gt; CLIMain\n OtherEditors --&gt; CLIMain\n CLIMain --&gt; API &amp; LSPServer\n LSPServer --&gt; Handlers\n REPL --&gt; API\n API --&gt; InternalAPI\n Handlers --&gt; InternalAPI &amp; Completion &amp; Diagnostics &amp; CodeActions &amp; Rename &amp; Hover &amp; References &amp; Format &amp; Refactoring\n InternalAPI --&gt; Startup &amp; Config &amp; DB\n Startup --&gt; KondoIntegration &amp; Classpath &amp; SourcePaths\n KondoIntegration --&gt; CljKondo &amp; Parser &amp; CacheFiles\n Format --&gt; Cljfmt\n DepGraph --&gt; CljDepend\n Hover --&gt; ClojureDocs\n Parser --&gt; Queries\n Queries --&gt; DB\n Completion --&gt; Queries\n Diagnostics --&gt; Queries\n CodeActions --&gt; Queries\n Rename --&gt; Queries\n References --&gt; Queries\n FileManagement --&gt; ProjectFiles &amp; ConfigFiles\n Classpath --&gt; Dependencies\n CLIMain:::entryPoint\n LSPServer:::entryPoint\n Handlers:::coreService\n Startup:::coreService\n Config:::coreService\n DB:::coreService\n KondoIntegration:::coreService\n Parser:::coreService\n Completion:::feature\n Diagnostics:::feature\n CodeActions:::feature\n Rename:::feature\n Hover:::feature\n References:::feature\n Format:::feature\n Refactoring:::feature\n CljKondo:::external\n Cljfmt:::external\n CljDepend:::external\n ClojureDocs:::external\n ProjectFiles:::storage\n ConfigFiles:::storage\n Dependencies:::storage\n CacheFiles:::storage\n classDef entryPoint fill:#e1f5fe\n classDef coreService fill:#f3e5f5\n classDef feature fill:#e8f5e8\n classDef external fill:#fff3e0\n classDef storage fill:#fce4ec\n</code></pre>"},{"location":"development/#coding","title":"Coding","text":"<p>There are several ways of finding and fixing a bug or implementing a new feature:</p> <ul> <li>The Clojure Way</li> <li>Create a test for your bug/feature, then implement the code following the test (TDD).</li> <li>Build <code>clojure-lsp[.bat]</code> using <code>bb debug-cli</code> each time you have made changes, and test it manually in your client. This is the slowest option.</li> </ul> <p>Whichever development path you choose: For final testing, it is good to rebuild the binary with <code>bb debug-cli</code>.</p> <p>There are two custom LSP methods <code>clojure/serverInfo/log</code> and <code>clojure/cursorInfo/log</code>. They can assist in debugging.</p>"},{"location":"development/#the-clojure-way","title":"The Clojure Way","text":"<p>With a clojure-lsp + nREPL powered Clojure editor you can modify your editor session's clojure-lsp server using the Clojure REPL.</p> <p>Here's demo video: https://www.youtube.com/watch?v=4UvT0yqBDw8</p> <p>These are the steps:</p> <ol> <li><code>bb debug-cli</code> - to build a <code>clojure-lsp[.bat]</code> executable that includes cider-nrepl in the jar. This executable will be saved at the root of the project.</li> <li>Configure your editor to use this <code>clojure-lsp[.bat]</code> executable</li> <li>Have your editor restart its clojure-lsp server</li> <li>Issue the clojure-lsp <code>serverInfo</code> command</li> <li>Find the <code>port</code> entry in the output</li> <li>Connect your editors nREPL client to this port</li> <li>Hack away!</li> </ol> <p>Seeing is believing. An easy way to convince yourself that you can actually change clojure-lsp mid-flight is to:</p> <ol> <li>Modify the <code>server-info</code> function in <code>src/clojure_lsp/handlers.clj</code><ul> <li>Say, you add a <code>:foo :bar</code> entry to the map returned</li> </ul> </li> <li>Evaluate the new <code>server-info</code> function definition</li> <li>Issue the clojure-lsp <code>serverInfo</code> command</li> <li>Find <code>:foo :bar</code> in the output</li> </ol> <p>You have just modified the LSP server powering your editor while it was running! This is the Clojure way. No recompiling and restarting and reloading. That is some other, non-Clojure, way.</p> <p>The details in how to perform these steps can vary a bit between the various Clojure editors/plugins.</p>"},{"location":"development/#visual-studio-code-with-calva","title":"Visual Studio Code with Calva","text":"<ul> <li> <p>This project comes with Calva configuration to use the <code>clojure-lsp[.bat]</code> executable built in step 1 above. You can skip step 2, unless are running on MS-Widnows, in which case you should update the setting in <code>.vscode/settings.json</code> to add the <code>.bat</code> extension, i.e. <code>\"calva.clojureLspPath\": \"./clojure-lsp.bat\"</code>.</p> </li> <li> <p>To restart the clojure-lsp server, use the VS Code command Developer: Reload Window</p> </li> <li>The Hack away! step needs to start with you issuing the command Calva: Load Current File and Dependencies.</li> </ul>"},{"location":"development/#emacs-with-cider","title":"Emacs with CIDER","text":"<ul> <li>To configure Emacs to use the nREPL-enabled executable, run <code>(setq lsp-clojure-custom-server-command '(\"~/path/to/clojure-lsp/clojure-lsp\"))</code>, adjusting the path as necessary. If you add this to your Emacs config, you can skip this step in the future.</li> <li>To restart the clojure-lsp server, execute the Emacs command <code>lsp-workspace-restart</code>.</li> <li>To find the server info, execute <code>lsp-clojure-server-info</code>.</li> <li>To connect the nREPL client, run <code>cider-connect-clj</code>, with \"localhost\" and the port.</li> </ul> <p>If you re-connect regulary, you may want to add this Emacs shortcut:</p> <pre><code>(defun lsp-clojure-nrepl-connect ()\n  \"Connect to the running nrepl debug server of clojure-lsp.\"\n  (interactive)\n  (let ((info (lsp-clojure-server-info-raw)))\n    (save-match-data\n      (when-let (port (and (string-match \"\\\"port\\\":\\\\([0-9]+\\\\)\" info)\n                           (match-string 1 info)))\n        (cider-connect-clj `(:host \"localhost\"\n                             :port ,port))))))\n</code></pre>"},{"location":"development/#vim-with-cocnvim-and-fireplace","title":"Vim with coc.nvim and Fireplace","text":"<ul> <li>Change <code>coc-settings.json</code> (<code>:CocConfig</code>) <code>clojure-lsp: {command: \"~/path/to/clojure-lsp/clojure-lsp\"}</code>, adjusting the past as necessary.</li> <li>To restart the clojure-lsp server use <code>:CocRestart</code></li> <li>To find the server info, <code>:echo CocRequest('clojure-lsp', 'clojure/serverInfo/raw')['port']</code></li> <li>To find the server log, <code>:echo CocRequest('clojure-lsp', 'clojure/serverInfo/raw')['log-path']</code></li> <li>To connect the nREPL client, run <code>:Connect &lt;port&gt;</code></li> </ul> <p>If you re-connect regulary, you may want to add something like this to your vimrc:</p> <pre><code>\" Copies the log-path to your clipboard\nnnoremap &lt;silent&gt; crsl :call setreg('*', CocRequest('clojure-lsp', 'clojure/serverInfo/raw')['log-path'])&lt;CR&gt;\n\" Connects to nrepl\nnnoremap &lt;silent&gt; crsp :execute 'Connect' CocRequest('clojure-lsp', 'clojure/serverInfo/raw')['port']&lt;CR&gt;\n</code></pre>"},{"location":"development/#neovim-with-conjure","title":"Neovim with Conjure","text":"<ul> <li>Change the lsp config <code>cmd</code> to \"~/path/to/clojure-lsp/clojure-lsp\", adjusting the path as necessary.</li> <li>To restart the LSP:</li> <li>To stop the clojure-lsp server, use <code>:lua vim.lsp.stop_client(vim.lsp.get_active_clients())</code></li> <li>To start the clojure-lsp server, use <code>:edit</code></li> <li>To find the server info or the log file, use <code>:lua clients = vim.lsp.get_active_clients() for k, client_data in ipairs(clients) do id = client_data.id end client = vim.lsp.get_client_by_id(id) result = client.request_sync(\"clojure/serverInfo/raw\", {}, 5000, 15) print('port = ' .. result.result.port) print('log-path = ' .. result.result['log-path'])</code></li> <li>To connect the nREPL client, run <code>:ConjureConnect &lt;port&gt;</code></li> </ul>"},{"location":"development/#debugging-profiling","title":"Debugging &amp; Profiling","text":"<p>The nREPL includes tools for debugging and profiling clojure-lsp. See <code>cli/dev/clojure_lsp/debug.clj</code>.</p> <p>If you're interested in using the profiling tools in that file, you'll need to be familiar with criterium and clj-async-profiler.</p> <p>Note that the performance of clojure-lsp is highly dependent on the size of its db. If you load a repl with <code>-A:build</code>, you'll have access to the debugging tools, but the db will be nearly empty. Follow the [steps][#the-clojure-way] above to connect to an nREPL which has a populated db.</p>"},{"location":"development/#testing","title":"Testing","text":"<p>Run <code>bb tasks</code> for a list of available dev tasks.</p> <p>The codebase consists of the <code>lib/</code> library and the <code>cli/</code> program which depends on it.</p> <ol> <li><code>bb test-lib</code>,</li> <li><code>bb test-cli</code>, and</li> <li><code>bb test</code> (for both of the above).</li> </ol> <p><code>cli/</code> produces a standalone <code>.jar</code> file that can be converted to a self contained <code>clojure-lsp[.bat]</code> script or a <code>clojure-lsp[.exe]</code> binary executable file.</p> <ol> <li><code>bb prod-jar</code> -&gt; <code>cli\\</code> standalone jar,</li> <li><code>bb prod-cli</code> -&gt; executable script with embedded <code>cli/</code> jar,</li> <li><code>bb debug-cli</code> -&gt; same as <code>prod-cli</code> but includes support for <code>cider-nrepl</code> and <code>clj-async-profile</code>, and</li> <li><code>bb native-cli</code> -&gt; binary executable produced with <code>graalvm</code>.</li> </ol> <p>There are also <code>cli/</code> integration tests. They require <code>./clojure[.bat|.exe]</code> to have already been built with one of the above cli tasks (__NOTE:__always ensure that you rebuild the <code>cli/</code> executable every time you make changes to <code>lib/</code> or <code>cli/</code> source code so tha the integration tests use an up to date executable).</p> <ol> <li><code>bb integration-test</code></li> </ol> <p>The same development version can be used to lint all of the source code.</p> <ol> <li><code>bb lint</code></li> </ol>"},{"location":"development/#writing-tests","title":"Writing tests","text":"<p>A test should be able to run on all JDK versions in scope starting with 1.8 and across <code>GNU/Linux</code>, <code>macos</code> and <code>MS-Windows</code> operating systems.</p> <p>The test author should be aware of the following important differences between *nix and windows:</p> <ol> <li>Line endings<ol> <li>On *nix: the single Line Feed (LF) char, i.e. <code>\\n</code>.</li> <li>On windows: the Carriage Return (CR) followed by the LF char (CRLF), i.e. <code>\\r\\n</code>.</li> </ol> </li> <li>Paths<ol> <li>On *nix: Use <code>/</code> as the path separator, absolute paths start with <code>/</code>.</li> <li>On windows: use <code>\\</code> as the path separator, absolute paths start either with a drive letter followed by <code>:\\</code>, i.e. <code>[A-Za-Z]:\\</code> (e.g. <code>c:\\temp</code> and <code>D:\\src</code>) or with a double <code>\\\\</code> indicating a network path (e.g. <code>\\\\computer39\\temp</code>).</li> </ol> </li> </ol> <p>Below are a few hints to assist with writing test that work accross the different platforms.</p> <ol> <li>Line Endings<ol> <li>When comparing strings, Use <code>clojure-lsp.test-helper.internal/string=</code> with <code>\\n</code> in your expected result.<ol> <li>e.g. use <code>(is (h/strings= \"one\\n\" result)</code> instead of <code>(is (= \"one\\r\\n\" result))</code> or <code>(is (= \"one\\n\" result))</code>.</li> </ol> </li> <li>Use <code>h/str-includes?</code> with <code>\\n</code> in the string to search for instead of <code>clojure.string/includes?</code>.<ol> <li>e.g. <code>(is (h/str-includes? (slurp \"path\") \"something\\n\"))</code> instead of <code>(is (str/includes? (slurp \"path\") \"something\\n\"))</code> or <code>(is (str/includes? (slurp \"path\") \"something\\r\\n\"))</code>.</li> </ol> </li> </ol> </li> <li>Paths<ol> <li>Always use <code>babashka.fs/canonicalize</code> when converting a relative path to an absolute path. Avoiding using any of java File/Path absolute or canonical equivalent fns. This ensures that the drive letter on windows is always in capitals (e.g. <code>D:\\</code> instead of <code>d:\\</code>). This is also the convention used throughout the codebase and it works as well with both existing and non-existing files.</li> <li>Use <code>clojure-lsp.test-helper.internal/file-path</code>, <code>clojure-lsp.test-helper.internal/file-&gt;uri</code> with *nix paths. They are converted to the format expected by the OS.<ol> <li>e.g. <code>(load-code (h/file-path \"/aaa.clj\")  \"(ns aaa)\")</code> instead of <code>(load-code \"/aaa.clj\" \"(ns aaa)\")</code> or <code>(load-code \"c:\\\\aaa.clj\" \"(ns aaa)\")</code></li> </ol> </li> </ol> </li> </ol>"},{"location":"features/","title":"Features","text":"<p>Below you can find all available features that clojure-lsp provides with examples using Emacs lsp-mode as the client.</p> <ul> <li>Built in LSP features</li> <li>clojure-lsp extra commands</li> </ul>"},{"location":"features/#lsp-features","title":"LSP features","text":""},{"location":"features/#find-a-functionvar-definition","title":"Find a function/var definition","text":""},{"location":"features/#find-defprotocoldefmulti-implementations","title":"Find defprotocol/defmulti implementations","text":""},{"location":"features/#find-a-functionvar-declaration-in-the-ns","title":"Find a function/var declaration in the ns","text":""},{"location":"features/#find-all-references-of-a-function-var-keyword-or-namespace-alias","title":"Find all references of a function, var, keyword or namespace alias","text":""},{"location":"features/#show-all-workspaceproject-symbols","title":"Show all workspace/project symbols","text":""},{"location":"features/#show-all-symbols-on-current-file","title":"Show all symbols on current file","text":""},{"location":"features/#rename-symbols","title":"Rename symbols","text":"<p>Also, it's possible to live rename symbols on the same buffer with <code>linkedEditingRange</code> feature.</p>"},{"location":"features/#document-highlight-on-hover-showing-symbol-usages","title":"Document highlight on hover showing symbol usages","text":""},{"location":"features/#documentation-and-clojuredocs-integration","title":"Documentation and clojuredocs integration","text":""},{"location":"features/#java-support","title":"Java support","text":"<p>To understand what is supported and how to configure it, check the settings section.</p> <p></p>"},{"location":"features/#completion","title":"Completion","text":""},{"location":"features/#library-names-and-version-completion","title":"Library names and version completion","text":""},{"location":"features/#snippets","title":"Snippets","text":"<p>Snippets are templates that make it easier to enter repeating code patterns, such as common functions/forms, they are available during completion. Tabstops are defined as <code>$number</code> with <code>$0</code> as last tabstop.</p> Check all available snippets here name description raw content <code>comment</code> Insert comment block <code>(comment\\n  ${0:body}\\n  )</code> <code>comment-heading</code> Insert comment Header <code>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;; ${1:Namespace summary title}\\n;;\\n;; ${2:Brief description}\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\\n$0</code> <code>comment-separator</code> Insert comment separator <code> ;; ${1:Namespace summary title}\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\\n$0</code> <code>rich-comment</code> Insert rich comment <code> (comment   $0 #_()) </code> <code>rich-comment-rdd</code> Insert rich comment rdd block <code>#_{:clj-kondo/ignore [:redefined-var]}\\n(comment\\n $0 #_())</code> <code>rich-comment-hotload</code> Insert rich comment library hotload <code>#_{:clj-kondo/ignore [:redefined-var]}\\n(comment\\n ;; Add-lib library for hot-loading\\n (require '[clojure.tools.deps.alpha.repl :refer [add-libs]])\\n (add-libs '{${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$3})\\n $0\\n) </code> <code>condp</code> Insert condp <code>(condp ${1:pred} ${2:expr}\\n $0)</code> <code>def</code> Insert def <code>(def ${1:name} $0)</code> <code>def-</code> Insert def private <code>(def ^:private ${1:name} $0)</code> <code>def-doc</code> Insert def with docstring <code>(def ${1:name}\\n  \\\"${2:docstring}\\\"\\n  $0)</code> <code>defmethod</code> Insert defmethod <code>(defmethod ${1:name} ${2:match}\\n [${3:args}]\\n $0)</code> <code>defmulti</code> Insert defmulti <code>(defmulti ${1:name} ${2:dispatch-fn})</code> <code>defn</code> Insert public defn <code>(defn ${1:name} [$2]\\n  $0)</code> <code>defn-doc</code> Insert public defn with docstring <code>(defn ${1:name}\\n  \\\"${2:docstring}\\\"\\n   [${3:args}]\\n  $0)</code> <code>defn-</code> Insert private defn <code>(defn%s ${1:name} [$2]\\n  $0)</code> <code>defprotocol</code> Insert defprotocol <code>(defprotocol ${1:Name}\\n $0)</code> <code>defrecord</code> Insert defrecord <code>(defrecord ${1:Name} [${2:fields}]\\n ${3:Protocol}\\n $0)</code> <code>deftype</code> Insert deftype <code>(deftype ${1:Name} [${2:fields}]\\n ${3:Protocol}\\n $0)</code> <code>fn</code> Insert fn <code>(fn [${1:arg-list}] $0)</code> <code>for</code> Insert for <code>(for [${1:item} ${2:coll}]\\n  $0)</code> <code>if</code> Insert if <code>(if ${1:test-expr}\\n ${2:then-expr}\\n ${3:else-expr})</code> <code>kwargs</code> Insert keyword args <code>{:keys [${1:keys}] :or {${2:defaults}}}</code> <code>let</code> Insert let <code>(let [$0])</code> <code>letfn</code> Insert letfn <code>(letfn [(${1:name} [${2:args}]\\n $0)])</code> <code>ns</code> Insert ns <code>(ns ${1:name}\\n  $0:references})</code> <code>ns-doc</code> Insert ns with docstring <code>(ns ${1:name}\\n  \\\"${2:docstring}\\\"\\n  ${0:references})</code> <code>require</code> Insert ns :require <code>(:require [${1:namespace}])$0</code> <code>require-as</code> Insert ns require with :as alias <code>(:require [${1:namespace} :as ${2:alias}]$3)</code> <code>require-refer</code> Insert ns :require with :refer <code>(:require [${1:namespace} :refer [$2]]$3)</code> <code>require-rdd</code> Insert require for rich comment experiments <code>(require '[${1:namespace} :as ${2:alias}]$3)$0</code> <code>req-as</code> Insert single require dep :as alias <code>[${1:namespace} :as ${2:alias}]</code> <code>req-refer</code> Insert single require dep with :refer <code>[${1:namespace} :refer [$2]]</code> <code>import</code> Insert import <code>(:import [${1:package}])</code> <code>use</code> Insert require refer preferred over use <code>(:require [${1:namespace} :refer [$2]])</code> <code>deps-alias</code> Insert alias with extra path &amp; deps <code>:${1:category/name}\\n {:extra-paths [\\\"${2:path}\\\"]\\n :extra-deps {${3:deps-maven or deps-git}}}$0</code> <code>deps-maven</code> Insert maven dependency <code>${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$0</code> <code>deps-git</code> Insert git dependency <code>${1:domain/library-name}\\n {:git/sha \\\"${2:git-sha-value}\\\"}$0 </code> <code>deps-git-tag</code> Insert git tag dependency <code>${1:domain/library-name}\\n {:git/tag \\\"${2:git-tag-value}\\\"\\n :git/sha \\\"${3:git-sha-value}\\\"}$0</code> <code>deps-git-url</code> Insert git URL dependency <code>${1:domain/library-name}\\n {:git/url \\\"https://github.com/$1\\\"\\n :git/sha \\\"${2:git-sha-value}\\\"}$0</code> <code>deps-local</code> Insert local dependency <code> ${1:domain/library-name} {:local/root \\\"${2:/path/to/project/root}\\\"}$0 </code> <code>deftest</code> Insert deftest clojure.test <code>(deftest ${1:name}-test\\n  (testing \\\"${2:Context of the test assertions}\\\"\\n  (is (= ${3:assertion-values}))$4)) $0</code> <code>testing</code> Insert testing clojure.test <code>(testing \\\"${1:Context of the test assertions}\\\"\\n  $0)</code> <code>is</code> Insert is clojure.test <code>(is (= ${1:assertion-values}))</code>"},{"location":"features/#custom-snippets","title":"Custom snippets","text":"<p>User can register additional custom snippets. For more information, check the snippets config documentation.</p>"},{"location":"features/#code-actions","title":"Code actions","text":"<p>See below for screenshots.</p>"},{"location":"features/#code-lenses-showing-symbol-references","title":"Code lenses showing symbol references","text":""},{"location":"features/#format-a-whole-file-or-range","title":"Format a whole file or range","text":""},{"location":"features/#signature-help","title":"Signature help","text":""},{"location":"features/#semantic-tokens","title":"Semantic tokens","text":"<p>The LSP server is the best to say what is the semantic value of a token on the editor, semantic tokens allows server return to client all tokens of a buffer and how client show apply highlight.</p> <p>Note: server return the semantic token (e.g. <code>function</code>) and the client/editor apply the color that matches the user's theme.</p> <p></p>"},{"location":"features/#call-hierarchy","title":"Call hierarchy","text":"<p>Show the incoming or outgoing call hierarchy of a function/variable as a lazy tree</p>"},{"location":"features/#incoming","title":"Incoming","text":"<p>Show functions that call the current one recursively</p> <p></p>"},{"location":"features/#outgoing","title":"Outgoing","text":"<p>Show functions that the current one call, recursively</p> <p></p>"},{"location":"features/#test-tree","title":"Test Tree","text":"<p>Show the tests tree hierarchy of a file</p> <p></p>"},{"location":"features/#project-tree","title":"Project tree","text":"<p>Show the project tree ns and external dependencies.</p> <p></p>"},{"location":"features/#diagnostics-linter","title":"Diagnostics (linter)","text":"<p>There are 3 diagnostics providers currently:</p> <ul> <li>clj-kondo: most diagnostics come from here, configurations of these linters should be done on clj-kondo config side, for more information on how to configure clj-kondo check here</li> <li>clojure-lsp: linters built-in + custom linters.</li> <li>clj-depend: optional namespace layer diagnostics.</li> </ul>"},{"location":"features/#built-in-linters","title":"Built-in linters","text":"<p>Below you can find the clojure-lsp built-in linters:</p>"},{"location":"features/#clojure-lspunused-public-var","title":"clojure-lsp/unused-public-var","text":"<p>For more information on how to configure it, check the diagnostics settings section.</p>"},{"location":"features/#clojure-lspdifferent-aliases","title":"clojure-lsp/different-aliases","text":"<p>For more information on how to configure it, check the diagnostics settings section.</p>"},{"location":"features/#custom-linters","title":"Custom linters","text":"<p>Clojure-lsp support linters that users or libs decide to create, these linters can use clojure-lsp db analysis to build whatever linter one may want, similar to clj-kondo hooks feature but with project awareness support and more robust test support.</p> <p>For more information on how to configure it, check the diagnostics settings section.</p>"},{"location":"features/#clj-depend","title":"clj-depend","text":"<p>Clojure-lsp has a optional integration with clj-depend, making it easier to configure namespaces relationship.</p> <p>For more information on how to configure it, check the diagnostics settings section.</p>"},{"location":"features/#stub-generation","title":"Stub generation","text":"<p>It's possible to configure clojure-lsp to generate and analyze stubs for specific namespaces available on your project classpath, this is useful for closed source dependencies like <code>datomic.api</code>, with that clojure-lsp will be able to make most features work with those dependencies. For more information check the stubs settings section.</p>"},{"location":"features/#execute-command","title":"Execute command","text":"<p>Commands that client can request. Most code actions use these commands as actions.</p> <p>Note: Most of these are available via code actions and clients or users may choose to use the code action menu to execute them instead of mapping.</p> <p>All functions in clojure-lsp have a two-letter mnemonic shortcut. E.g. <code>tf</code> for <code>thread-first-all</code>. We strongly suggest that client authors and users use these shortcuts keys when choosing to map these commands to key chords or menus; this allows for users to maintain muscle memory and familiarity as they switch between clients and editors. Thank you to clj-refactor for this system and other tools that adhere to it.</p> <p>LSP clients will allow you to bind these commands to shortcuts or menu items using LSP's <code>workspace/executeCommand</code> and passing a map with <code>\"command\"</code> and <code>\"arguments\"</code> keys.</p> <p>Arguments: - <code>file-uri</code>: Absolute file uri. e.x. <code>file:///home/user/project/src/main.clj</code> - <code>row</code>: line-number of the cursor, 0 based. - <code>col</code>: col-number of the cursor, 0 based. - <code>name</code>: Used when introducing a name, usually a string for a valid clojure symbol. - <code>filename</code>: Filename path. e.x. <code>src/utils.clj</code></p> Shortcut Command Name Arguments Available via code action Example ab drag-param-backward Drag param backward <code>[file-uri,row,col]</code> \u2705 af drag-param-forward Drag param forward <code>[file-uri,row,col]</code> \u2705 ai add-missing-import Add import to namespace <code>[file-uri,row,col[,name]]</code> \u2705 am add-missing-libspec Add missing require <code>[file-uri,row,col]</code> \u2705 as add-require-suggestion Add require suggestion <code>[file-uri,row,col,ns,alias,refer]</code> \u2705 cc cycle-coll Cycle collection <code>(#{}, {}, [], ())</code> <code>[file-uri,row,col]</code> \u2705 ck cycle-keyword-auto-resolve Cycle keyword auto-resolve <code>[file-uri,row,col]</code> \u2705 cn clean-ns Clean namespace <code>[file-uri,row,col]</code> \u2705 cp cycle-privacy Cycle privacy of def/defn <code>[file-uri,row,col]</code> \u2705 ct create-test Create test <code>[file-uri,row,col]</code> \u2705 df demote-fn Demote fn to #() <code>[file-uri,row,col]</code> \u2705 db drag-backward Drag backward <code>[file-uri,row,col]</code> \u2705 df drag-forward Drag forward <code>[file-uri,row,col]</code> \u2705 dk destructure-keys Destructure keys <code>[file-uri,row,col]</code> \u2705 ed extract-to-def Extract to def <code>[file-uri,row,col,name]</code> \u2705 ef extract-function Extract function <code>[file-uri,row,col,name]</code> \u2705 el expand-let Expand let <code>[file-uri,row,col]</code> fe create-function Create function from example <code>[file-uri,row,col]</code> \u2705 ga get-in-all Move all expressions to get/get-in <code>[file-uri,row,col]</code> \u2705 gl get-in-less Remove one element from get/get-in <code>[file-uri,row,col]</code> \u2705 gm get-in-more Move another expression to get/get-in <code>[file-uri,row,col]</code> \u2705 gn get-in-none Unwind whole get/get-in <code>[file-uri,row,col]</code> \u2705 il introduce-let Introduce let <code>[file-uri,row,col,name]</code> is inline-symbol Inline Symbol <code>[file-uri,row,col]</code> \u2705 ma resolve-macro-as Resolve macro as <code>[file-uri,row,col]</code> \u2705 mf move-form Move form <code>[file-uri,row,col,filename]</code> \u2705 ml move-to-let Move expression to let <code>[file-uri,row,col,name]</code> \u2705 pf promote-fn Promote #() to fn, or fn to defn <code>[file-uri,row,col,fn-name]</code> \u2705 rr replace-refer-all-with-refer Replace ':refer :all' with ':refer [...]' <code>[file-uri,row,col,refers]</code> \u2705 ra replace-refer-all-with-alias Replace ':refer :all' with alias <code>[file-uri,row,col]</code> \u2705 rk restructure-keys Restructure keys <code>[file-uri,row,col]</code> \u2705 sc change-coll Switch collection to <code>{}, (), #{}, []</code> <code>[file-uri,row,col,\"map\"/\"list\"/\"set\"/\"vector\"]</code> \u2705 sl sort-clauses Sort map/vector/list/set/clauses <code>[file-uri,row,col]</code> \u2705 tf thread-first-all Thread first all <code>[file-uri,row,col]</code> \u2705 th thread-first Thread first expression <code>[file-uri,row,col]</code> tl thread-last-all Thread last all <code>[file-uri,row,col]</code> \u2705 tt thread-last Thread last expression <code>[file-uri,row,col]</code> ua unwind-all Unwind whole thread <code>[file-uri,row,col]</code> \u2705 uw unwind-thread Unwind thread once <code>[file-uri,row,col]</code> fs forward-slurp Paredit: forward slurp <code>[file-uri,row,col]</code> fb forward-barf Paredit: forward barf <code>[file-uri,row,col]</code> bs backward-slurp Paredit: backward slurp <code>[file-uri,row,col]</code> bb backward-barf Paredit: backward barf <code>[file-uri,row,col]</code> rs raise-sexp Paredit: Raise sexp <code>[file-uri,row,col]</code> ks kill-sexp Paredit: Kill sexp <code>[file-uri,row,col]</code> ff forward Paredit: Move forward <code>[file-uri,row,col]</code> fr forward-select Paredit: Select forward <code>[file-uri,row,col]</code> bb backward Paredit: Move backward <code>[file-uri,row,col]</code> br backward-select Paredit: Select backward <code>[file-uri,row,col]</code> gt go-to-test Go to test <code>[file-uri,row,col]</code> \u2705"},{"location":"features/#dev","title":"Dev","text":""},{"location":"features/#server-information","title":"Server information","text":"<p>Return basic information about the server.</p>"},{"location":"features/#cursor-information","title":"Cursor information","text":"<p>Return debug information about the element at point.</p>"},{"location":"installation/","title":"Installation","text":"<p>Below are all available <code>clojure-lsp</code> installation methods, after installed, follow the documentation for your editor's language client. See Clients.</p>"},{"location":"installation/#homebrew-macos-and-linux","title":"Homebrew (MacOS and Linux)","text":"<p>We have a custom tap using the native compiled binaries for users that use homebrew:</p> <pre><code>brew remove clojure-lsp # if you have old clojure-lsp installed via brew\nbrew install clojure-lsp/brew/clojure-lsp-native\n</code></pre>"},{"location":"installation/#script","title":"Script","text":"<p>Stable release:</p> <pre><code>sudo bash &lt; &lt;(curl -s https://raw.githubusercontent.com/clojure-lsp/clojure-lsp/master/install)\n</code></pre> <p>nightly build:</p> <pre><code>curl -O https://raw.githubusercontent.com/clojure-lsp/clojure-lsp/master/install\nchmod a+x install\nsudo ./install --version nightly\n</code></pre>"},{"location":"installation/#nix","title":"Nix","text":"<p><code>clojure-lsp</code> is available in the nixpkgs:</p> <pre><code>nix-shell -p clojure-lsp\n</code></pre> <p>or if using flakes:</p> <pre><code>nix run github:clojure-lsp/clojure-lsp\n# or\nnix shell github:clojure-lsp/clojure-lsp\n</code></pre> <p>or consume the flake overlay:</p> <pre><code>inputs.clojure-lsp.url = \"github:clojure-lsp/clojure-lsp\";\nnixpkgs.overlays = [ inputs.clojure-lsp.overlays.default ];\n</code></pre>"},{"location":"installation/#arch-linux","title":"Arch Linux","text":"<p><code>clojure-lsp</code> is available in the Arch User Repository. It can be installed using your favorite AUR helper such as yay, yaourt, apacman and pacaur. Here is an example using <code>yay</code>:</p> <pre><code>yay -S clojure-lsp-bin\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<p><code>clojure-lsp</code> is available as a native executable in the Clojure Scoop bucket. You need to install Scoop if you don't have it already.</p> <p>Issue following command to download the <code>clojure-lsp</code> executable.</p> <pre><code>scoop install clojure-lsp\n</code></pre>"},{"location":"installation/#native-binary-recommended","title":"Native binary (recommended)","text":"<p><code>clojure-lsp</code> builds using GraalVM a native executable for each OS: Linux, MacOS and Windows.</p>"},{"location":"installation/#manually","title":"Manually","text":"<p>The binaries are available on Github releases as <code>clojure-lsp-native-&lt;os&gt;-&lt;arch&gt;.zip</code>, after downloading you just need to unzip it.</p>"},{"location":"installation/#embedded-jar-legacy-executable","title":"Embedded jar (Legacy executable)","text":"<p>In Github releases you will find a <code>clojure-lsp</code> file that runs a embedded jar. This should be removed soon, use GraalVM binaries instead.</p> <ul> <li>You need <code>java</code> on your $PATH.</li> <li>Grab the latest <code>clojure-lsp</code> from github LATEST</li> <li>Place it in your $PATH with a chmod 755</li> </ul>"},{"location":"settings/","title":"Settings","text":"<p><code>clojure-lsp</code> settings are picked up only on server start (but they can be changed on runtime) and can be configured in 4 ways:</p> <ul> <li>Project configuration</li> <li>Global configuration</li> <li>LSP InitializationOptions</li> <li>Classpath config paths</li> </ul>"},{"location":"settings/#project","title":"Project","text":"<p><code>clojure-lsp</code> will look for project specific settings in a file called <code>.lsp/config.edn</code>. It will search from your project root folder up the directory structure so you can have multiple projects share the same settings.</p> <p>Example: <pre><code>{:cljfmt {:indents {#re \".*\" ns [[:inner 0] [:inner 1]]}}\n :auto-add-ns-to-new-files? false}\n</code></pre></p>"},{"location":"settings/#global","title":"Global","text":"<p>For global settings which should work for all the projects using <code>clojure-lsp</code>, you just need to add the same configs to <code>~/.config/clojure-lsp/config.edn</code> or <code>$XDG_CONFIG_HOME/clojure-lsp/config.edn</code>.</p> <p>Note: <code>~/.lsp/config.edn</code> is considered too but deprecated.</p> <p>For an example of a global <code>config.edn</code>, check here.</p>"},{"location":"settings/#initializationoptions","title":"InitializationOptions","text":"<p>This is specific for a client, which it sends to <code>clojure-lsp</code> on startup, check LSP spec for more information. This is useful if you are changing a default for a client/editor that will affect all users of that editor.</p> <p>This is an example how Emacs <code>lsp-mode</code> pass custom information.</p> <p>Another example, for neovim users, using coc.nvim and coc-clojure can be found here</p> <p>If you are using a client which defines InitializationOptions as a json object, you can use json types instead:</p> <ul> <li>keyword -&gt; string or colon-prefixed string (<code>\"incremental\"</code> or <code>\":incremental\"</code>)</li> <li>map -&gt; object (<code>{\"unused-public-ns\": {\"level\": \"info\"}}</code>)</li> <li>set -&gt; array (<code>[\"src\" \"test\"]</code>)</li> <li>vector -&gt; array (<code>[\"src\" \"test\"]</code>)</li> </ul>"},{"location":"settings/#classpath-config-paths","title":"Classpath config paths","text":"<p>When starting the server, clojure-lsp will search for a specific path <code>clojure-lsp.exports/&lt;group-id&gt;/&lt;artifact-id&gt;/config.edn</code> for extra configurations in the classpath, only if you set the setting <code>:classpath-config-paths</code> containing that <code>group/artifact</code>. Example:</p> <p>Lib <code>my-org/my-lib</code> could have a clojure-lsp config edn that makes sense for the usages of that lib, making available on the classpath:</p> <p><code>my-lib/resources/clojure-lsp.exports/my-org/my-lib/config.edn</code> <pre><code>{:cljfmt {:indents {foo [[:block 0]]}}}\n</code></pre></p> <p>and then if your project use/has the <code>my-org/my-lib</code> inside your classpath, you could add the setting</p> <p><code>your-project/.lsp/config.edn</code> <pre><code>{:classpath-config-paths [\"my-org/my-lib\"]}\n</code></pre></p> <p>And then clojure-lsp will merge the configuration from the lib with the other configurations from your project.</p> <p>This is useful if you have some rule to apply to clojure-lsp for multiple projects, mostly using via API for linting for example, and want to move the common configuration to some place instead of adding to each project that needs that.</p>"},{"location":"settings/#all-settings","title":"All settings","text":"<p>You can find all settings and its default values here and below the docs for each one:</p> name description default <code>:clean</code> Settings related to <code>clean-ns</code> refactoring. Check Clean settings below. <code>:additional-snippets</code> Additional user snippets to be available during completing, check the snippets section below <code>[]</code> <code>:add-missing :add-to-rcf</code> Missing requires and imports will be added to the top of the comment form for code actions and completions from within a comment form, can be <code>:ask</code>, <code>:never</code> or <code>:always</code>. <code>:ask</code> <code>:api :exit-on-errors?</code> Whether to exit the clojure-lsp process during api/cli call if any error is found, like classpath scan failure <code>true</code> <code>:auto-add-ns-to-new-files?</code> Whether to automatically add the <code>ns</code> form in new blank files. <code>true</code> <code>:cache-path</code> Where to store the project's analysis cache, used to speed up next <code>clojure-lsp</code> startup. A path relative to project root or an absolute path. <code>.lsp/.cache</code> <code>:classpath-config-paths</code> List of extra configurations to load from classpath, for more info, check Classpath config paths section. <code>[]</code> <code>:cljfmt-config-path</code> Where to find cljfmt configuration for formatting. A path relative to project root or an absolute path. Use <code>#re</code> for regex inside the cljfmt configuration file. <code>.cljfmt.edn</code> <code>:cljfmt</code> If no <code>:cljfmt-config-path</code> is provided, used this for formatting, json encoded configuration for cljfmt <code>{}</code> <code>:code-lens</code> <code>:segregate-test-references</code> Segregate main references from test references with option to disable <code>true</code> <code>:completion</code> <code>:analysis-type</code> The type for analysis to be performed during the completion, accepted values are <code>fast-but-stale</code> which won't wait for remaining analysis to complete to process the completion and <code>slow-but-accurate</code> which will wait for any changes on document to then process the completion items. <code>:fast-but-stale</code> <code>:completion</code> <code>:additional-edits-warning-text</code> A warning to show when the completion will perform additional edits, such as requiring a new alias. Appears in the completion items' documentation. <code>nil</code> <code>:copy-kondo-configs?</code> Whether to copy clj-kondo hooks configs exported by libs on classpath during startup lint. <code>true</code> <code>:dependency-scheme</code> Defines the format that the client and server should use for URLs of dependencies in jars. The two valid values are <code>\"jar\"</code> and <code>\"zipfile\"</code>. Different editors may handle these URLs differently. For example, in nvim when a <code>\"zipfile\"</code> URI is opened, the file will be editable, but <code>\"jar\"</code> URIs will not be. (This can be powerful, but if you edit a jar in your .m2 directory, you may break other projects.) <code>\"jar\"</code> will make urls compatible with java's JarURLConnection. Clients that can't extract the jar natively can make an LSP extension request of <code>clojure/dependencyContents</code> with the jar uri and the server will return the jar entry's contents, an approach used by some Java clients <code>\"zipfile\"</code> <code>:document-formatting?</code> if true or not present, document formatting is provided. <code>true</code> <code>:document-range-formatting?</code> if true or not present, document range formatting is provided. <code>true</code> <code>:hover</code> <code>:arity-on-same-line?</code> Whether to keep the arity on the same line of the function on hover, useful for Emacs users. <code>false</code> <code>:hover</code> <code>:clojuredocs</code> Whether to get clojuredocs information on hover, the clojuredocs content is cached. <code>true</code> <code>:hover</code> <code>:hide-file-location?</code> Whether to show the full filename and path on hover. <code>false</code> <code>:hover</code> <code>:hide-signature-call?</code> Whether to show the surrounding call on hover. <code>false</code> <code>:source-paths-ignore-regex</code> list of regex to filter source-paths. By default, source-paths are retrieved from classpath , and usually the classpath contains folders that are not directly project code or it's auto-generated like cljs <code>resources</code> or <code>target</code> folders but it's inside your project. Replace old <code>:ignore-classpath-directories</code> setting. This operates on relative paths. <code>[\"target.*\"]</code> <code>:paths-ignore-regex</code> list of regex to filter paths to be analyzed. Useful for excluding huge files or folders that may affect final analysis size and performance, like huge edn files. These are absolute paths, so make sure that regex pattern matches fully expanded path. <code>[]</code> <code>:java</code> <code>:download-jdk-source?</code> Whether to download JDK source from <code>:java :jdk-source-download-uri</code> and cache after startup for JDK classes java support. <code>false</code> <code>:java</code> <code>:home-path</code> Whether to use this path to find JDK source and cache after startup for JDK classes java support. nil <code>:java</code> <code>:jdk-source-uri</code> URI containing the JDK source to be used. If <code>:download-jdk-source?</code> is enabled and URI is NOT <code>file://</code> then download the source. Check <code>https://github.com/clojure-lsp/jdk-source</code>for more sources. <code>https://raw.githubusercontent.com/clojure-lsp/jdk-source/main/openjdk-19/reduced/source.zip</code> <code>:java</code> <code>:decompile-jar-as-project?</code> Whether to decompile the whole jar as a java project when finding the definition of a java class, useful to navigate to other classes from that java class. <code>true</code> <code>:keep-parens-when-threading?</code> Whether to keep parenthesis when threading single arity functions. <code>false</code> <code>:lint-project-files-after-startup?</code> Whether to async lint all project only files after startup to make features like List project errors work. <code>true</code> <code>:diagnostics :range-type</code> which range use for diagnostics, <code>:full</code> makes the range be the whole affected diagnostic while <code>:simple</code> makes the range be the first character of the diagnostic. <code>:full</code> <code>:linters</code> linters configuration, check the diagnostics settings section below <code>:log-path</code> A absolute path to a file where clojure-lsp should log. A JVM tmp path, usually <code>/tmp/clojure-lsp.*.out</code> <code>:notify-references-on-file-change</code> Whether to update diagnostics of the changed references when editing files, avoiding outdated diagnostics in other files. <code>true</code> <code>:project-specs</code> A vector of a map with <code>:project-path</code> and <code>:classpath-cmd</code>, defining how <code>clojure-lsp</code> should find your project classpath. The <code>:project-path</code> should be a file and the <code>:classpath-cmd</code> the command to run to get the classpath Check <code>Classpath scan</code> section below <code>:semantic-tokens?</code> Whether to enable LSP semantic tokens server support for syntax highlighting. <code>true</code> <code>:source-aliases</code> Used for <code>deps.edn</code> or <code>project.clj</code> projects, the aliases which clojure-lsp should get the source-paths besides the root level <code>:paths</code> and <code>:extra-paths</code>. Check the Source paths discovery section below. <code>#{:dev :test}</code> <code>:source-paths</code> project-local directories to look for clj/cljc/cljs files, if using <code>deps.edn</code>, <code>project.clj</code> or <code>bb.edn</code>, use <code>:source-aliases</code> instead. <code>#{\"src\" \"test\"}</code> <code>:stubs</code> Stub generation related settings, check the Stub generation section below. <code>:test-locations-regex</code> A set of patterns (regex strings) specifying where the tests live. Patterns are matched with clojure.core/re-find against file URI strings. <code>#{\"_test\\.clj[a-z]?$\"}</code> <code>:text-document-sync-kind</code> The sync kind during document changes, if client should send whole buffer or just related changes. Should be <code>:full</code> or <code>:incremental</code> <code>:full</code> <code>:use-metadata-for-privacy?</code> Whether to use <code>^:private</code> metadata for refactorings instead of <code>defn-</code> <code>false</code> <code>:analysis</code> <code>:keywords</code> <code>:definitions</code> Whether to enable keyword definitions analysis for performance. <code>true</code> <code>:analysis</code> <code>:keywords</code> <code>:usages</code> Whether to enable keyword usages analysis for performance. <code>true</code> <code>:analysis</code> <code>:java</code> <code>:class-definitions</code> Whether to enable java class definitions analysis for performance. <code>true</code> <code>:analysis</code> <code>:java</code> <code>:member-definitions</code> Whether to enable java member definitions analysis for performance. <code>true</code> <code>:analysis</code> <code>:symbols</code> Whether to enable symbols analysis for performance. <code>true</code> <code>:otlp</code> OpenTelemetry related settings, check the Opentelemetry section below. <code>false</code>"},{"location":"settings/#classpath-scan","title":"Classpath scan","text":"<p>clojure-lsp needs to analyze the whole project and its dependencies to understand your code for most features, during the startup clojure-lsp will try to find the classpath of your project spawning a process like <code>lein</code> or <code>clojure</code>.</p> <p>clojure-lsp uses these default project-specs, if the default is not enough, you can try to change the <code>:source-aliases</code> setting, if that is not enough yet, you can configure <code>:project-specs</code> which is a more low-level setting.</p> <p>This is a summary of the current logic and supported project types:</p> <ul> <li><code>leiningen</code>: If a <code>project.clj</code> is found at the project root, clojure-lsp will run <code>lein classpath</code> with <code>:source-aliases</code> specified if any.</li> <li><code>deps</code>: If a <code>deps.edn</code> is found at the project root, clojure-lsp will run <code>clojure -Spath</code> with <code>:source-aliases</code> specified if any.</li> <li><code>boot</code>: If a <code>build.boot</code> is found at the project root, clojure-lsp will run <code>boot show --fake-classpath</code>.</li> <li><code>shadow-cljs</code>: If a <code>shadow-cljs.edn</code> is found at the project root, clojure-lsp will run <code>npx shadow-cljs classpath</code>.</li> <li><code>babashka</code>: If a <code>bb.edn</code> is found at the project root, clojure-lsp will run <code>bb print-deps --format classpath</code>.</li> </ul> <p>Note that it's possible to have more than one project type at the same time e.g. deps + babashka, clojure-lsp will merge the classpath and everything should work fine.</p> <p>Make sure to have these programs available on the <code>PATH</code> environment variable used by your editor, otherwise clojure-lsp will warn about a classpath scan fail, causing a lot of features to not work properly.</p> <p>Alternatively, you can configure the <code>project-specs</code> specific for your project, for example:</p> <p><code>.lsp/config.edn</code> <pre><code>{:project-specs [{:project-path \"deps.edn\"\n                  :env {\"PATH\" \"/some/custom/path\"} ;; optional if you want to override the PATH used in the classpath-cmd\n                  :classpath-cmd [\"clojure\" \"-A:my-custom-alias\" \"-Spath\"]}]}\n</code></pre></p> <p>Note that clojure-lsp will analyzes and cache for next startups, it will only analyze again if:</p> <ul> <li>The project has no cache (<code>.lsp/.cache</code>)</li> <li>The project deps file (<code>project.clj</code> for example) changed.</li> <li>The clj-kondo config has changed.</li> </ul>"},{"location":"settings/#diagnostics-linter","title":"Diagnostics (linter)","text":"<p>Default: Check <code>:linters</code> in all-available-settings.edn.</p>"},{"location":"settings/#clj-kondo","title":"clj-kondo","text":"<p><code>clojure-lsp</code> uses clj-kondo under the hood to lint the code and retrieve the analysis to make most of features work, you don't have to install clj-kondo to make it work.</p> <p><code>clojure-lsp</code> will use a specific clj-kondo version that can be retrieved via <code>clojure-lsp --version</code>, but make sure you have a <code>.clj-kondo/config.edn</code> file properly configured.</p> <p>It has the possible key/values:</p> <ul> <li> <p><code>:clj-kondo</code></p> </li> <li> <p><code>:level</code> with available values: <code>:off</code>, <code>:on</code> with default value of <code>:on</code></p> </li> <li><code>:report-duplicates</code> which will show all linters of the same symbol instead of showing only the first spot. Available values: <code>true</code>, <code>false</code> with default value of <code>true</code></li> <li><code>ns-exclude-regex</code> which will exclude the diagnostics/findings for namespaces that match this regex.</li> </ul> <p>Example:</p> <p><code>.lsp/config.edn</code> <pre><code>{:linters {:clj-kondo {:level :on\n                       :report-duplicates true\n                       :ns-exclude-regex \"some-ns.*\"}}}\n</code></pre></p> Note for vim users  If you are a (neo)vim user and have [ale](https://github.com/dense-analysis/ale) installed as a plugin, you **should not** have this configured as a linter `let g:ale_linters = {'clojure': ['clj-kondo']}` in your vimrc. Having this linter enabled via `ale` will only conflict with the built-in clj-kondo bundled with clojure-lsp.   <p>Also, clojure-lsp by default pass <code>copy-configs</code> flag as <code>true</code> to clj-kondo to copy configurations exported from libs on classpath, to disable this behavior, set <code>:copy-kondo-configs?</code> setting to false.</p> <p>For more information about all clj-kondo available configurations, check the clj-kondo configuration section</p>"},{"location":"settings/#clojure-lsp-built-in-linters","title":"clojure-lsp built-in linters","text":"<p>Clojure-lsp has project aware linters, below are the linters:</p> Note for legacy config Some of these linters config used to live on clj-kondo side, so to avoid breaking changes, clojure-lsp still supports configuration of them on clj-kondo side, but it's recommended to configure on clojure-lsp settings side."},{"location":"settings/#clojure-lspunused-public-var","title":"clojure-lsp/unused-public-var","text":"<p>A linter that reports public functions/vars not used across the project.</p> <p>It has the possible key/values:</p> <ul> <li><code>:level</code> with available values: <code>:info</code>, <code>:warning</code>, <code>:error</code> or <code>:off</code> with default value of <code>:info</code>.</li> <li><code>:exclude</code> a whole namespace with <code>#{my-ns}</code> or a specific var <code>#{my-ns/foo}</code>.</li> <li><code>:exclude-regex</code> same as above but with support for regex, like <code>#{\"my-ns/f.*\"}</code>.</li> <li><code>:exclude-when-defined-by</code> excludes this linter when your var is defined by a macro for example, like <code>#{my-ns/deftest}</code>.</li> <li><code>:exclude-when-defined-by-regex</code> same as above but with support for regex, like <code>#{\"my-ns/.*\"}</code>.</li> <li><code>:exclude-when-contains-meta</code> excludes this linter when your var has any of these metas, like <code>#{:my-meta}</code>.</li> <li><code>:ignore-test-references?</code> whether to ignore test references of a var-definition when considering if the var is unused. Useful to check functions that have tests but are not being used in the source code. Relies on Clojure-LSP's <code>:test-locations-regex</code> setting to locate test files. Default: <code>false</code>.</li> </ul> <p>Example:</p> <p><code>.lsp/config.edn</code> <pre><code>{:linters {:clojure-lsp/unused-public-var {:level :warning\n                                           :exclude #{my-ns/foo\n                                                      my-ns/bar\n                                                      other-ns\n                                                      my-func}\n                                           :exclude-regex #{\"my-integration-tests.*\"}\n                                           :exclude-when-defined-by #{my-ns/defflow}\n                                           :exclude-when-defined-by-regex #{\"my.custom/macro-.*\"}\n                                           :exclude-when-contains-meta #{:my-cool-meta}\n                                           :ignore-test-references? true}}}\n</code></pre></p>"},{"location":"settings/#clojure-lspdifferent-aliases","title":"clojure-lsp/different-aliases","text":"<p>Sometimes, it's desirable to use the same alias across namespaces to enhance readability and reduce cognitive load.</p> <p>It has the possible keys/values:</p> <ul> <li><code>:level</code> with available values: <code>:info</code>, <code>:warning</code>, <code>:error</code> or <code>:off</code> with default value of <code>:off</code>.</li> <li><code>:exclude-aliases</code> ignores the symbols provided in a set, example <code>#{sut}</code></li> </ul> <p><code>.lsp/config.edn</code> <pre><code>{:linters {:clojure-lsp/different-aliases {:level :info\n                                           :exclude-aliases #{foo}}}}\n</code></pre></p>"},{"location":"settings/#clojure-lspcyclic-dependencies","title":"clojure-lsp/cyclic-dependencies","text":"<p>A linter that detects cyclic dependencies between namespaces in your project. Cyclic dependencies can cause issues during compilation and make code harder to understand and maintain.</p> <p>It has the possible keys/values:</p> <ul> <li><code>:level</code> with available values: <code>:info</code>, <code>:warning</code>, <code>:error</code> or <code>:off</code> with default value of <code>:error</code>.</li> <li><code>:exclude-namespaces</code> a set of namespace names or regex patterns to exclude from cyclic dependency detection, example <code>#{my-ns \"test.*\"}</code></li> </ul> <p><code>.lsp/config.edn</code> <pre><code>{:linters {:clojure-lsp/cyclic-dependencies {:level :warning\n                                             :exclude-namespaces #{\"dev\" \"user\" \"test.*\"}}}}\n</code></pre></p> <p>This linter will report all detected cycles with detailed information about the dependency path. For example, if namespace <code>a</code> requires <code>b</code>, <code>b</code> requires <code>c</code>, and <code>c</code> requires <code>a</code>, it will report the cycle as \"a -&gt; b -&gt; c -&gt; a\".</p>"},{"location":"settings/#custom-linters","title":"Custom linters","text":"<p>clojure-lsp supports defining custom linters in a project or lib (via classpath-config) where one can create their own kind of diagnostics, more about the rationale here.</p> <ul> <li>1: If clojure-lsp finds in its config a custom-linter like:</li> </ul> <p><code>.lsp/config.edn</code> or any classpath config <pre><code>{:linters {:custom {my-org.my-linter/lint {:level :info}}}}\n</code></pre></p> <ul> <li>2: clojure-lsp will then search for a clojure file that defines that linter in the classpath:</li> </ul> <p><code>clojure-lsp.exports/linters/my_org/my_linter.clj</code> <pre><code>(ns my-org.my-linter\n  (:require [clojure-lsp.custom-linters-api :as api])) ;; this ns has multiple helpers for handling the analysis.\n\n(defn lint [{:keys [db uris params reg-diagnostic!]}]\n  ,,,\n  (reg-diagnostic! {:uri (first uris)\n                    :level (:level params)\n                    :code \"my-org/missing-unit-test\"\n                    :message \"Logic function missing unit test\"\n                    :source \"my-org/codestyle\"\n                    :range {:row 1 :col 2 :end-row 3 :end-col 4}}))\n</code></pre></p> <ul> <li> <p>3: When clojure-lsp analyzes your project or file, it will consider that custom lint.</p> </li> <li> <p>4: (optional) You can create tests for that custom linter leveraging the test-helper lib <code>com.github.clojure-lsp/clojure-lsp-test-helper</code>:</p> </li> </ul> <pre><code>(ns my-org.my-linter-test\n  (:require [clojure-lsp.test-helper :as h]\n            [clojure.edn :as edn]))\n\n(deftest lint-test\n  (h/reset-components!)\n  (h/set-db! {:classpath [\"resources\"]\n              :settings {:linters {:custom {my-org.my-linter/lint {:level :info}}}}})\n  (h/load-code! {:code (h/code \"(ns my-project.my-ns)\"\n                               \"(defn my-fn [])\")})\n  (is (= {h/default-uri [{:code \"my-org/missing-unit-test\"\n                          :message \"Logic function missing unit test\"\n                          :range {:end {:character 11 :line 1} :start {:character 6 :line 1}}\n                          :severity 3\n                          :source \"my-org/codestyle\"}]}\n              (:custom (:diagnostics (h/db))))))\n</code></pre>"},{"location":"settings/#clj-depend","title":"clj-depend","text":"<p>clojure-lsp uses clj-depend when any clj-depend config is found either on clojure-lsp config or as a <code>.clj-depend/config.edn</code> file.</p> <p>The clj-depend config should be within the <code>:config</code> key.</p> <pre><code>{:config {:layers {:controller {:defined-by      \".*\\\\.controller\\\\..*\"\n                                :accesses-layers #{:logic}}\n                   :logic      {:defined-by      \".*\\\\.logic\\\\..*\"\n                                :accesses-layers #{:model}}}}}\n</code></pre> <p>When you need to inform some other parameter for clj-depend that is not a config, you can inform it this way:</p> <pre><code>{:config    {,,,}\n :snapshot? true}\n</code></pre>"},{"location":"settings/#disable-a-linter","title":"Disable a linter","text":"<p>It's not recommended to disable a linter as it provides helpful smart checks/suggestions for your code, even so it's possible via the following config:</p> <p><code>.lsp/config.edn</code> <pre><code>{:linters {:clj-kondo {:level :off}\n           :clj-depend {:level :off}}}\n</code></pre></p> <p>For information on how to troubleshoot the linter, check the troubleshooting section</p>"},{"location":"settings/#source-paths-discovery","title":"Source paths discovery","text":"<p>Some features require know the available source paths of your project, where your code lives, clojure-lsp has some settings for that.</p> <ul> <li> <p>By default, clojure-lsp will infer source-paths from the classpath, excluding files that are jar and not under project-root, this usually works for most cases, if not, check next items.</p> </li> <li> <p>You can specify a <code>source-aliases</code> setting, making clojure-lsp use those alias when conmputing the classpath, e.g. <code>#{:src :test :my-alias}</code></p> </li> <li> <p>If that is not enough, for example you have source-paths that are not included on any project profile (not recommended), you can manually specify via the <code>:source-paths</code> settings. e.g <code>[\"src\" \"test\" \"my/other/folder\"]</code>.</p> </li> </ul>"},{"location":"settings/#clean","title":"Clean","text":"<p>Default: Check <code>:clean</code> in all-available-settings.edn.</p>"},{"location":"settings/#automatically-after-ns-refactor","title":"automatically-after-ns-refactor","text":"<p>Whether to call clean-ns on the namespace after applying any refactor to it like adding missing require/imports/refers.</p>"},{"location":"settings/#ns-inner-blocks-indentation","title":"ns-inner-blocks-indentation","text":"<p>How to indent ns children forms like require,import.</p>"},{"location":"settings/#next-line","title":"<code>next-line</code>","text":"<p>Keep first child on the next line of <code>:require</code>/<code>:import</code> and next children following the same indentation. Recommended by how-to-ns guide too. Check <code>;; better</code> on Clojure Style Guide.</p>"},{"location":"settings/#same-line","title":"<code>same-line</code>","text":"<p>Keep first child on the same line of <code>:require</code>/<code>:import</code> and next children following the same indentation. Check <code>;; good</code> on Clojure Style Guide.</p>"},{"location":"settings/#keep","title":"<code>keep</code>","text":"<p>Don't change indentation at all, keeping the one user selected first.</p>"},{"location":"settings/#ns-import-classes-indentation","title":"ns-import-classes-indentation","text":"<p>How to indent classes inside package imports from :import form. Note: package imports with only one class will keep indentation: Ex: <code>[java.io File]</code></p>"},{"location":"settings/#next-line_1","title":"<code>next-line</code>","text":"<p>Keep the first class inside a package import on the next line and next children following the same indentation. Ex:</p> <pre><code>(:import\n  [java.io\n    File\n    Foo])\n</code></pre>"},{"location":"settings/#same-line_1","title":"<code>same-line</code>","text":"<p>Keep the first class inside a package import on the same line and next children following the same indentation. Ex:</p> <pre><code>(:import\n  [java.io File\n           Foo])\n</code></pre> <p>Also, check <code>:sort :import-classes</code> below for more customizations.</p>"},{"location":"settings/#sort","title":"sort","text":"<p>to disable a specific sort you can set it to nil, example:</p> <pre><code>{:clean {:sort {:import-classes nil}}}\n</code></pre>"},{"location":"settings/#ns","title":"<code>ns</code>","text":"<p>Whether to enable sort of <code>ns</code> children like require, import forms following Clojure Style Guide.</p>"},{"location":"settings/#require","title":"<code>require</code>","text":"<p>Whether to enable sort of <code>:require</code> form. <code>true</code> to sort according to the Clojure Style Guide, <code>:lexicographically</code> to do a lexicographic sort that places unwrapped namespaces last.</p>"},{"location":"settings/#import","title":"<code>import</code>","text":"<p>Whether to enable sort of <code>:import</code> form.</p>"},{"location":"settings/#import-classes","title":"<code>import-classes</code>","text":"<p>Whether to enable sort of package classes inside <code>:import</code> form.</p> <ul> <li><code>:classes-per-line</code>: the max classes allowed to keep in a single line, if more than this value, clojure-lsp will move all classes to <code>:next-line</code> or <code>:same-line</code> following <code>:ns-import-classes-indentation</code>, Possivel values: any positive number or <code>-1</code> to keep all classes in the same line.</li> </ul>"},{"location":"settings/#refer","title":"<code>refer</code>","text":"<p>Whether to enable sort of <code>:refer</code> form.</p> <ul> <li><code>:max-line-length</code>: the max refers to keep at same line before breaking the line. Default <code>80</code>.</li> </ul>"},{"location":"settings/#snippets","title":"Snippets","text":"<p>Besides the 19 built-in snippets, it's possible to configure custom additional snippets via <code>:additional-snippets</code> setting:</p> <ul> <li><code>:name</code> the name to use while completing to reach that snippet.</li> <li><code>:detail</code> Custom text to show along with the completion name.</li> <li><code>:snippet</code> The body of the snippet, besides any text it can contains:<ul> <li><code>$1</code>, <code>$2</code>, ... as the tabstops representing each place where user may change the content.</li> <li><code>$0</code> as the last tabstop.</li> <li><code>$current-form</code> to replace the current form in the snippet.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>{:additional-snippets [{:name \"wrap-let-sexpr\"\n                        :detail \"Wrap current sexpr in let\"\n                        :snippet \"(let [$1] $0$current-form)\"}]}\n</code></pre> <p>when completion is called on the code below with the cursor as <code>|</code> <pre><code>wrap|(+ 1 2)\n</code></pre></p> <p>It should return a completion item that after applied should result in:</p> <pre><code>(let [|] (+ 1 2))\n</code></pre>"},{"location":"settings/#java-support","title":"Java support","text":"<p>At the moment, clojure-lsp only supports find definition of java classes and completion of fields/methods when it detects a Java class (mostly from static classes usages), other features are not supported yet.</p> <p>When a find-definition of a java class is triggered, clojure-lsp checks the following:</p> <ul> <li>If the java source(<code>.java</code>) is available on classpath, clojure-lsp just return that file location.</li> <li>If the java source is not available, only the <code>.class</code>, clojure-lsp decompiles it.</li> <li>If <code>:java :decompile-jar-as-project?</code> is enabled, clojure-lsp decompiles the whole jar at the global cache folder (<code>~/.cache/clojure-lsp/java</code>)</li> <li>If <code>:java :decompile-jar-as-project?</code> is disabled, clojure-lsp decompiles the class file at the local cache folder (<code>.lsp/.cache/java</code>)</li> <li>If the java class is from JDK (e.g. <code>java.util.UUID</code>), clojure-lsp tries a few things to be able to sucessfully find the definition, following this waterfall decision:<ul> <li>Most JRE installations contains the java source code in a <code>src.zip</code>, clojure-lsp tries to find it via <code>:java :home-path</code> setting if provided, <code>JAVA_HOME</code> env var or <code>java</code> command on <code>PATH</code>, if found clojure-lsp extracts to its global cache dir ($XDG_CACHE or <code>~/.cache/clojure-lsp</code>) to be used in other projects.</li> <li>If <code>src.zip</code> is not found or user specified a custom <code>:java :jdk-source-uri</code>, clojure-lsp tries to download the source from that uri, only if <code>:java :download-jdk-source?</code> is enabled, disabled by default, extracting to the global cache dir later.</li> </ul> </li> </ul>"},{"location":"settings/#stub-generation","title":"Stub generation","text":"<p>It's possible to configure clojure-lsp to generate and analyze stubs for specific namespaces available on your project classpath, this is useful for closed source dependencies like <code>datomic.api</code>, with that clojure-lsp will be able to make most features work with those dependencies. The available settings inside <code>:stubs</code> are:</p> <ul> <li><code>:generation</code> for auto stubs generation:<ul> <li><code>:namespaces</code> the namespaces to generate and analyze stubs, empty by default disabling stub generation.</li> <li><code>:output-dir</code> the output where to generate the stubs, by default <code>.lsp/.cache/stubs</code></li> <li><code>:java-command</code> the path to java command to spawn the stub process, default use <code>java</code> from <code>$PATH</code>.</li> </ul> </li> <li><code>:extra-dirs</code>, dirs to analyze to consider as part of manual generated stubs. Empty by default.</li> </ul> <p>Example:</p> <pre><code>{:stubs {:generation {:namespaces #{\"datomic.api\"}}}}\n</code></pre> <p>This should generate stubs for <code>datomic.api</code> namespace only on <code>.lsp/.cache/stubs</code> and clojure-lsp should analyze that during startup to provide completion, hover and other features.</p> <p>Or to use manual generated stubs:</p> <pre><code>{:stubs {:extra-dirs [\".my-stubs\"]}}\n</code></pre> <p>clojure-lsp will generate no stubs with that, but analyze that folder and consider it as manual generated stubs.</p>"},{"location":"settings/#changing-settings","title":"Changing settings","text":"<p><code>clojure-lsp</code> supports <code>workspace/didChangeConfiguration</code> commands to change the server settings while it is running, everything inside the <code>:settings</code> map can be changed, but not outside it (the project root for example).</p>"},{"location":"settings/#opentelemetry-integration","title":"OpenTelemetry integration","text":"<p><code>clojure-lsp</code> has support for OpenTelemetry(otlp), if configured, all logs will use the otlp logger API.</p> <p>To configure, set <code>:otlp :enable</code> to <code>true</code> and configure your OTLP collector via <code>:otlp :config</code> map following otlp auto-configure settings. Example:</p> <p><code>.lsp/config.edn</code> <pre><code>{:otlp {:enable true\n        :config {\"otel.exporter.otlp.logs.protocol\" \"http/protobuf\"\n                 \"otel.exporter.otlp.logs.endpoint\" \"https://my-otlp-endpoint.com/foo\"\n                 \"otel.exporter.otlp.headers\" \"Authorization=Bearer 123456\"}}}\n</code></pre></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#logs","title":"Logs","text":""},{"location":"troubleshooting/#server-log","title":"Server log","text":"<p>clojure-lsp logs most of what is doing to a file which location could be found:</p> <ul> <li>on <code>:log-path</code> if specified in your clojure-lsp config, for example: <code>{:log-path \"/tmp/clojure-lsp.out\"}</code></li> <li>Auto generated every server start on <code>/tmp/clojure-lsp.&lt;TIMESTAMP&gt;.out</code> or <code>/var/folders/...</code> for MacOS.</li> </ul> Emacs users You can open server logs in a buffer with <code>M-x</code> <code>lsp-clojure-server-log</code>."},{"location":"troubleshooting/#client-server-log","title":"Client&lt;-&gt;Server log","text":"<p>All LSP clients should provide a way to get the jsonrpc logs between client and server, this helps debug the requests and responses content and time.</p> <p>Check below how to get the logs for most used clients:</p> Emacs/lsp-mode https://emacs-lsp.github.io/lsp-mode/page/troubleshooting/#log-client-server-json VSCode/Calva https://calva.io/clojure-lsp/#viewing-the-logs-between-the-client-and-server <p>An alternative is to pass <code>--trace-level verbose</code> to clojure-lsp during process start and clojure-lsp will log the communication to the server-log.</p>"},{"location":"troubleshooting/#server-info","title":"Server Info","text":"<p>clojure-lsp has a custom command that prints useful information about the current running clojure-lsp for the current project, it's called <code>clojure/serverInfo/log</code>, some clients already have ways to call that automatically:</p> <ul> <li>Emacs lsp-mode: via <code>lsp-clojure-server-info</code> command.</li> <li>VsCode Calva: via <code>Calva Diagnostics: Clojure-lsp Server Info</code> command.</li> <li>Intellij clojure-lsp plugin: via <code>Settings</code> <code>Tools</code> <code>Clojure LSP</code> <code>Copy server info to clipboard</code> option.</li> </ul>"},{"location":"troubleshooting/#some-features-are-not-working","title":"Some features are not working","text":"<p>clojure-lsp uses clj-kondo to analyze the classpath during server initialize for most features work, so make sure you don't see any \"Error while looking up classpath...\" on clojure-lsp log file.</p> <p>Please note that <code>clojure-lsp</code> comes bundled with <code>clj-kondo</code>, so you do not have to install it separately.</p> <p>For more information, check the Classpath scan settings section.</p>"},{"location":"troubleshooting/#classpath-scan-error","title":"Classpath scan error","text":"<p>By default clojure-lsp knows how to scan most common clojure projects using the following rules:</p> <ul> <li>If the project root has a <code>project.clj</code> file, it'll run <code>lein classpath</code> to get the classpath.</li> <li>If the project root has a <code>deps.edn</code> file, it'll run <code>clojure -Spath</code> to get the classpath.</li> <li>If the project root has a <code>build.boot</code> file, it'll run <code>boot show --fake-classpath</code> to get the classpath.</li> <li>If the project root has a <code>shadow-cljs.edn</code> file, it'll run <code>npx shadow-cljs classpath</code> to get the classpath.</li> </ul> <p>If your project doesn't follow the above rules or you need a custom command to get the classpath you need to configure the <code>project-specs</code> clojure-lsp setting, for more details check the settings section.</p>"},{"location":"troubleshooting/#folders-not-being-analyzedlinted","title":"Folders not being analyzed/linted","text":"<p>By default clojure-lsp get source-paths from classpath, for more details check settings section.</p> <ul> <li> <p>If the definition lives under a different source dir, you can define <code>source-aliases</code> or <code>source-paths</code> setting as mentioned on settings section.</p> </li> <li> <p>It is also important to get your <code>project-root</code> correct in your client otherwise the source paths will not be found, check the project-root via your LSP client.</p> </li> <li> <p>If you are using <code>deps</code> and using a <code>:local/root</code> dependency to reference another project, i.e.,</p> </li> </ul> <pre><code>{:deps {foo.bar/baz {:local/root \"/path/to/foo/project/containing/a/deps.edn\"}}}\n</code></pre> <ul> <li>and you are finding that <code>gotoDefinition</code> isn't working when attempting to jump to the namespace in the referenced project, then it could be that your <code>~/.config/clojure-lsp/config.edn</code> (or legacy <code>~/.lsp/config.edn</code>) has a source paths entry, i.e., <code>:source-paths [\"src\" \"test\"]</code>. This will prevent the lookup from working, as it restricts clojure-lsp to only scan those folders in the current project for sources, and not the other project referenced via the <code>:local/root</code> deps entry. It can be fixed by removing the <code>:source-paths</code> from the config (as clojure-lsp has good defaults anyway). If you do require more specific source paths, then those can be added at the project level.</li> </ul>"},{"location":"troubleshooting/#wrong-diagnosticslint","title":"Wrong diagnostics/lint","text":"<ul> <li>clojure-lsp use clj-kondo to lint and cache in a <code>.clj-kondo/.cache</code> dir, try to remove that folder if you think it's not linting correctly</li> <li>clojure-lsp persist the external jars analysis in a <code>.lsp/.cache/</code> folder, if you have issues with some specific feature, try to remove that dir and restart the server.</li> <li>If you have issues with macros, double check your clj-kondo config.</li> </ul>"},{"location":"troubleshooting/#missing-add-require-on-code-actions-when-using-coc-and-neovim","title":"Missing <code>Add require...</code> on code actions when using CoC and (neo)vim","text":"<p>If you find, when executing the command <code>(coc-codeaction-line)</code> (or <code>(coc-codeaction-selected)</code> or <code>(coc-codeaction-cursor)</code>), that you aren't getting back all of the code actions you might expect, please ensure that you have, in your <code>coc-settings.json</code> the line <code>disableDiagnostics</code> set to <code>false</code> or better yet, don't have the line there at all :-</p> <p>---)</p>"},{"location":"troubleshooting/#server-is-not-initializing","title":"Server is not initializing","text":"<p>Make sure you have the most recent version of <code>clojure-lsp</code></p> <p>Check if the executable is working running it from the command line, it should start up and start reading from stdin. Type <code>Content-Length: 51\\n\\n{\"jsonrpc\":\"2.0\",\"method\":\"foo\",\"id\":1,\"params\":{}}</code>. After a few moments you should get something like:</p> <pre><code>$ ./clojure-lsp\nContent-Length: 51\n\n{\"jsonrpc\":\"2.0\",\"method\":\"foo\",\"id\":1,\"params\":{}}\n\nContent-Length: 101\n\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32601,\"message\":\"Method not found\",\"data\":{\"method\":\"foo\"}}}\n</code></pre> <p>If that is ok, clojure-lsp logs to <code>/tmp/clojure-lsp.*.out</code>, so watch that file and start your editor.</p> <p>LSP Clients also generally have a way to trace server interactions. Turn that on and attach both server and client logs to an issue if it's not obvious what's going on.</p> Vim users For example, if you are using neovim with CoC, first ensure that <code>trace.server</code> is set to <code>verbose</code> in your <code>coc-settings.json</code> file, e.g.,  <pre>\n<code>\n  \"languageserver\": {\n    \"clojure-lsp\": {\n      \"command\": \"clojure-lsp\",\n      \"filetypes\": [\"clojure\"],\n      \"disableDiagnostics\": false,\n      \"rootPatterns\": [\"deps.edn\", \"project.clj\"],\n      \"additionalSchemes\": [\"jar\", \"zipfile\"],\n      \"trace.server\": \"verbose\",\n      \"initializationOptions\": {\n        \"project-specs\": [{\n          \"project-path\": \"deps.edn\",\n          \"classpath-cmd\": [\"clj\", \"-Spath\"]\n        }],\n        \"use-metadata-for-privacy?\": true,\n      }\n    }\n  }\n</code>\n</pre>  Then, once vim has loaded (and clojure-lsp has initialised), you can issue this command:  <code>:CocCommand workspace.showOutput</code>  This will show the JSON request/response bodies that go between vim and clojure-lsp. Please capture that information if you need help in tracking down the problem you are experiencing (either by reporting github issues, or talking with someone in Slack/Discord or whatever...)"},{"location":"troubleshooting/#high-memory-usage","title":"High memory usage","text":"<p>clojure-lsp uses a native image that helps a lot with memory usage, but there is no hard limit so for huge Clojure projects or projects with lots of dependencies, memory may be a issue because of multiple analysis (keywords, function usages, java class/members etc).</p> <p>It's possible to retrieve the project analysis of a running clojure-lsp process via the serverInfo command, a <code>:analysis</code> map will contain both internal (your project) and external (project dependencies) count of each analysis used by clojure-lsp, extremally high count of elements (&gt; hundred thousand) tends to increase memory usage + cache size (<code>.lsp/.cache</code>).</p> <p>As last resource if your project has a enormous number of some specific elements, it's possible to disable some analysis which should help decrease memory usage and even increase performance via the <code>:analysis</code> setting, but keep in mind that some features related to those analysis may not work, for example, <code>{:analysis {:keywords false}}</code> will remove support for find-references of keywords, or <code>{:analysis {:java {:class-definitions false :member-definitions false}}}</code> will completly disable java features like auto completion of java elements.</p>"},{"location":"troubleshooting/#macos","title":"MacOS","text":"<p>In some version of MacOS, Apple restrict the binary to run, to fix that run: <code>xattr -d com.apple.quarantine /path/to/clojure-lsp</code></p>"},{"location":"api/api/","title":"API (JVM)","text":"<p>The namespace clojure-lsp.api should be used as the entrypoint for all available features of the CLI and some specific for library only usage, feel free to open a issue for missing features.</p> <p>Below is an example using the clean-ns feature on a <code>deps.edn</code> project:</p> <pre><code>{:aliases \n  {:lint-ns {:replace-deps {com.github.clojure-lsp/clojure-lsp {:mvn/version \"...\"}}\n             :exec-fn clojure-lsp.api/clean-ns!\n             :exec-args {:dry? true}}}}\n</code></pre>"},{"location":"api/bb-pod/","title":"Babashka pod","text":"<p>It's possible to load clojure-lsp as a babashka pod giving access to the <code>clojure-lsp.api</code> namespace, Check babashka pod registry example.</p>"},{"location":"api/ci/","title":"CI","text":"<p>Having clojure-lsp cli in your CI machine is enough to run any task, if using Github Actions, you can use setup-clojure-lsp GitHub action to install clojure-lsp in your CI.</p> <p>Remember to install your build tool, like <code>clojure</code> or <code>leiningen</code> as well in your CI according to your project to clojure-lsp be able to scan the classpath correctly.</p>"},{"location":"api/cli/","title":"CLI (terminal)","text":"<p><code>clojure-lsp --help</code> should show all available commands and options:</p> <pre><code>Clojure development tool implementing LSP\n\nUsage: clojure-lsp &lt;command&gt; [&lt;options&gt;]\n\nAll options:\n  -h, --help                           Print the available commands and its options\n      --version                        Print clojure-lsp version\n      --verbose                        Use stdout for clojure-lsp logs instead of default log settings\n      --trace                          Deprecated: use --trace-level instead.\n      --trace-level LEVEL       off    Enable trace logs between client and server, for debugging. Set to 'messages' for basic traces, or 'verbose' for more detailed traces. Defaults to 'off' for no traces.\n  -s, --settings SETTINGS              Optional settings as edn to use for the specified command. For all available settings, check https://clojure-lsp.io/settings\n      --log-path PATH                  Path to use as the log path for clojure-lsp.out, debug purposes only.\n      --dry                     false  Make no changes to files, only report diffs\n      --raw                     false  Print only necessary data\n  -p, --project-root PATH              Specify the path to the project root to clojure-lsp consider during analysis startup.\n  -n, --namespace NS            []     Optional namespace to apply the action, all if not supplied. This flag accepts multiple values\n      --filenames FILENAMES            Optional filenames to apply the action. Filenames can be either absolute/relatetive files or directories. This flag accepts filenames separated by comma or double colon.\n      --ns-exclude-regex REGEX         Optional regex representing the namespaces to be excluded during a command\n  -o, --output EDN                     Optional settings as edn on how the result should be printed. Check `clojure-lsp.api/diagnostics`/`clojure-lsp.api/dump` for all available options to this flag.\n      --from FROM                      Full qualified symbol name or ns only, e.g. my-project/my-var. option for rename/references\n      --to TO                          Full qualified symbol name or ns only, e.g. my-project/my-var. option for rename\n      --analysis EDN                   Optional settings as edn on how clojure-lsp should consider the analysis. Check `clojure-lsp.api/dump` for all available options to this flag.\n\nAvailable commands:\n  listen (or empty)    Start clojure-lsp as server, listening to stdin.\n  clean-ns             Organize ns form, removing unused requires/refers/imports and sorting alphabetically.\n  diagnostics          Analyze the project and find all diagnostics (warnings, errors).\n  format               Format code using cljfmt.\n  rename               Rename a symbol and all references across the project, use --from and --to options.\n  references           Find all references of a full qualified symbol across the project and/or dependencies, use --from option.\n  dump (experimental)  Dump all project known data including classpath, source-paths, dep-graph and clj-kondo analysis data.\n\nSee https://clojure-lsp.io/settings/ for detailed documentation.\n</code></pre>"},{"location":"api/lein-plugin/","title":"Leiningen plugin","text":"<p>To run clojure-lsp from Leiningen easily, check lein-clojure-lsp plugin.</p>"},{"location":"api/what-is-it/","title":"What is clojure-lsp API?","text":"<p>clojure-lsp is commonly used in a text editor during code development, but since it knows and have all necessary features to handle clojure code, it's the ideal/reliable tool to manage your code outside the editor as well via multiple ways.</p> <p>It has its own API containing the main features that can be used as: </p> <ul> <li> <p>API (JVM): Use from your REPL or any other library that wants to leverage clojure-lsp features programatically.</p> </li> <li> <p>CLI: Use from your terminal as a tool to format, clean, check diagnostics from clojure-lsp executable directly.</p> </li> <li> <p>CI: Need to check if your code is formatted/clean/doesn't contain any lint errors after push? Use it in your CI.</p> </li> <li> <p>Lein plugin: Use all CLI features but without the need to install it on your machine, using directly as a leiningen plugin.</p> </li> <li> <p>Babashka pod: Use clojure-lsp as a babashka pod for your bb program.</p> </li> </ul>"},{"location":"api/what-is-it/#settings","title":"Settings","text":"<p>clojure-lsp will check for <code>.lsp/config.edn</code> in the project or home dir, but it's possible to force override the settings via the <code>:settings</code> option of the API or <code>--settings</code> option of the CLI.</p> <p>For all available settings, check the settings documentation.</p>"}]}